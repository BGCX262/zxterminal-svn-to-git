// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
#include "StdAfx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zaoxun {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OilQuantityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OilQuantityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OilQuantityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OilQuantityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DistanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DistanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DistanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DistanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OilingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OilingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OilingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OilingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnloadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnloadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnloadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnloadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedLimitMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedLimitMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShortMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShortMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioFileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioFileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaptureFileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaptureFileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Material_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialsNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialsNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollisionCarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollisionCarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AntiCollisionNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntiCollisionNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* EDipperInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EDipperInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EDipperInfoNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EDipperInfoNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEDippersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEDippersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEDippersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEDippersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadCompleteNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadCompleteNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelLoadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelLoadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelLoadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelLoadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RejectLoadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejectLoadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RejectLoadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejectLoadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceStatusChangeNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceStatusChangeNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CarType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RunningStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, device_id_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponse_descriptor_ = file->message_type(1);
  static const int LoginResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, car_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, run_status_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  CheckRequest_descriptor_ = file->message_type(2);
  static const int CheckRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRequest, device_id_),
  };
  CheckRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckRequest_descriptor_,
      CheckRequest::default_instance_,
      CheckRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckRequest));
  CheckResponse_descriptor_ = file->message_type(3);
  static const int CheckResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponse, status_),
  };
  CheckResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckResponse_descriptor_,
      CheckResponse::default_instance_,
      CheckResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckResponse));
  OilQuantityRequest_descriptor_ = file->message_type(4);
  static const int OilQuantityRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilQuantityRequest, device_id_),
  };
  OilQuantityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OilQuantityRequest_descriptor_,
      OilQuantityRequest::default_instance_,
      OilQuantityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilQuantityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilQuantityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OilQuantityRequest));
  OilQuantityResponse_descriptor_ = file->message_type(5);
  static const int OilQuantityResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilQuantityResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilQuantityResponse, quantity_),
  };
  OilQuantityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OilQuantityResponse_descriptor_,
      OilQuantityResponse::default_instance_,
      OilQuantityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilQuantityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilQuantityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OilQuantityResponse));
  ProductionRequest_descriptor_ = file->message_type(6);
  static const int ProductionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionRequest, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionRequest, period_),
  };
  ProductionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductionRequest_descriptor_,
      ProductionRequest::default_instance_,
      ProductionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductionRequest));
  ProductionResponse_descriptor_ = file->message_type(7);
  static const int ProductionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionResponse, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionResponse, quantity_),
  };
  ProductionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductionResponse_descriptor_,
      ProductionResponse::default_instance_,
      ProductionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductionResponse));
  DistanceRequest_descriptor_ = file->message_type(8);
  static const int DistanceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceRequest, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceRequest, period_),
  };
  DistanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DistanceRequest_descriptor_,
      DistanceRequest::default_instance_,
      DistanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DistanceRequest));
  DistanceResponse_descriptor_ = file->message_type(9);
  static const int DistanceResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceResponse, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceResponse, distance_),
  };
  DistanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DistanceResponse_descriptor_,
      DistanceResponse::default_instance_,
      DistanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DistanceResponse));
  TimesRequest_descriptor_ = file->message_type(10);
  static const int TimesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesRequest, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesRequest, period_),
  };
  TimesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimesRequest_descriptor_,
      TimesRequest::default_instance_,
      TimesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimesRequest));
  TimesResponse_descriptor_ = file->message_type(11);
  static const int TimesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesResponse, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesResponse, times_),
  };
  TimesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimesResponse_descriptor_,
      TimesResponse::default_instance_,
      TimesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimesResponse));
  OilingRequest_descriptor_ = file->message_type(12);
  static const int OilingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingRequest, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingRequest, volume_),
  };
  OilingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OilingRequest_descriptor_,
      OilingRequest::default_instance_,
      OilingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OilingRequest));
  OilingResponse_descriptor_ = file->message_type(13);
  static const int OilingResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingResponse, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingResponse, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingResponse, result_),
  };
  OilingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OilingResponse_descriptor_,
      OilingResponse::default_instance_,
      OilingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OilingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OilingResponse));
  LoadRequest_descriptor_ = file->message_type(14);
  static const int LoadRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRequest, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRequest, edipper_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRequest, car_no_),
  };
  LoadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadRequest_descriptor_,
      LoadRequest::default_instance_,
      LoadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadRequest));
  LoadResponse_descriptor_ = file->message_type(15);
  static const int LoadResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResponse, edipper_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResponse, material_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResponse, result_),
  };
  LoadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadResponse_descriptor_,
      LoadResponse::default_instance_,
      LoadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadResponse));
  UnloadRequest_descriptor_ = file->message_type(16);
  static const int UnloadRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadRequest, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadRequest, edipper_device_id_),
  };
  UnloadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnloadRequest_descriptor_,
      UnloadRequest::default_instance_,
      UnloadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnloadRequest));
  UnloadResponse_descriptor_ = file->message_type(17);
  static const int UnloadResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadResponse, result_),
  };
  UnloadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnloadResponse_descriptor_,
      UnloadResponse::default_instance_,
      UnloadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnloadResponse));
  SpeedLimitMessage_descriptor_ = file->message_type(18);
  static const int SpeedLimitMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedLimitMessage, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedLimitMessage, speed_),
  };
  SpeedLimitMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedLimitMessage_descriptor_,
      SpeedLimitMessage::default_instance_,
      SpeedLimitMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedLimitMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedLimitMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedLimitMessage));
  ShortMessage_descriptor_ = file->message_type(19);
  static const int ShortMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, dest_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, content_),
  };
  ShortMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShortMessage_descriptor_,
      ShortMessage::default_instance_,
      ShortMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShortMessage));
  GPSData_descriptor_ = file->message_type(20);
  static const int GPSData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, loctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, addrstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, district_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, poi_),
  };
  GPSData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSData_descriptor_,
      GPSData::default_instance_,
      GPSData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSData));
  AudioFileData_descriptor_ = file->message_type(21);
  static const int AudioFileData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, dest_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, total_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, current_packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, data_),
  };
  AudioFileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioFileData_descriptor_,
      AudioFileData::default_instance_,
      AudioFileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioFileData));
  CaptureFileData_descriptor_ = file->message_type(22);
  static const int CaptureFileData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFileData, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFileData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFileData, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFileData, total_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFileData, current_packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFileData, data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFileData, data_),
  };
  CaptureFileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaptureFileData_descriptor_,
      CaptureFileData::default_instance_,
      CaptureFileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaptureFileData));
  Material_descriptor_ = file->message_type(23);
  static const int Material_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, material_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, english_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, chinese_name_),
  };
  Material_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Material_descriptor_,
      Material::default_instance_,
      Material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Material));
  MaterialsNotification_descriptor_ = file->message_type(24);
  static const int MaterialsNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsNotification, material_),
  };
  MaterialsNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialsNotification_descriptor_,
      MaterialsNotification::default_instance_,
      MaterialsNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialsNotification));
  CollisionCarInfo_descriptor_ = file->message_type(25);
  static const int CollisionCarInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionCarInfo, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionCarInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionCarInfo, car_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionCarInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionCarInfo, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionCarInfo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionCarInfo, latitude_),
  };
  CollisionCarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollisionCarInfo_descriptor_,
      CollisionCarInfo::default_instance_,
      CollisionCarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionCarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionCarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollisionCarInfo));
  AntiCollisionNotification_descriptor_ = file->message_type(26);
  static const int AntiCollisionNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntiCollisionNotification, angle_),
  };
  AntiCollisionNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AntiCollisionNotification_descriptor_,
      AntiCollisionNotification::default_instance_,
      AntiCollisionNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntiCollisionNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntiCollisionNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AntiCollisionNotification));
  EDipperInfo_descriptor_ = file->message_type(27);
  static const int EDipperInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EDipperInfo, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EDipperInfo, device_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EDipperInfo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EDipperInfo, latitude_),
  };
  EDipperInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EDipperInfo_descriptor_,
      EDipperInfo::default_instance_,
      EDipperInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EDipperInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EDipperInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EDipperInfo));
  EDipperInfoNotification_descriptor_ = file->message_type(28);
  static const int EDipperInfoNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EDipperInfoNotification, infos_),
  };
  EDipperInfoNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EDipperInfoNotification_descriptor_,
      EDipperInfoNotification::default_instance_,
      EDipperInfoNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EDipperInfoNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EDipperInfoNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EDipperInfoNotification));
  GetEDippersRequest_descriptor_ = file->message_type(29);
  static const int GetEDippersRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEDippersRequest, device_id_),
  };
  GetEDippersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEDippersRequest_descriptor_,
      GetEDippersRequest::default_instance_,
      GetEDippersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEDippersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEDippersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEDippersRequest));
  GetEDippersResponse_descriptor_ = file->message_type(30);
  static const int GetEDippersResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEDippersResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEDippersResponse, edippers_),
  };
  GetEDippersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEDippersResponse_descriptor_,
      GetEDippersResponse::default_instance_,
      GetEDippersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEDippersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEDippersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEDippersResponse));
  LoadCompleteNotification_descriptor_ = file->message_type(31);
  static const int LoadCompleteNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadCompleteNotification, edipper_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadCompleteNotification, car_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadCompleteNotification, load_result_),
  };
  LoadCompleteNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadCompleteNotification_descriptor_,
      LoadCompleteNotification::default_instance_,
      LoadCompleteNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadCompleteNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadCompleteNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadCompleteNotification));
  CancelLoadRequest_descriptor_ = file->message_type(32);
  static const int CancelLoadRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelLoadRequest, car_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelLoadRequest, edipper_device_id_),
  };
  CancelLoadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelLoadRequest_descriptor_,
      CancelLoadRequest::default_instance_,
      CancelLoadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelLoadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelLoadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelLoadRequest));
  CancelLoadResponse_descriptor_ = file->message_type(33);
  static const int CancelLoadResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelLoadResponse, car_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelLoadResponse, edipper_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelLoadResponse, result_),
  };
  CancelLoadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelLoadResponse_descriptor_,
      CancelLoadResponse::default_instance_,
      CancelLoadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelLoadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelLoadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelLoadResponse));
  RejectLoadRequest_descriptor_ = file->message_type(34);
  static const int RejectLoadRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectLoadRequest, edipper_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectLoadRequest, car_device_id_),
  };
  RejectLoadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RejectLoadRequest_descriptor_,
      RejectLoadRequest::default_instance_,
      RejectLoadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectLoadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectLoadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RejectLoadRequest));
  RejectLoadResponse_descriptor_ = file->message_type(35);
  static const int RejectLoadResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectLoadResponse, edipper_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectLoadResponse, car_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectLoadResponse, result_),
  };
  RejectLoadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RejectLoadResponse_descriptor_,
      RejectLoadResponse::default_instance_,
      RejectLoadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectLoadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectLoadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RejectLoadResponse));
  ExitNotification_descriptor_ = file->message_type(36);
  static const int ExitNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitNotification, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitNotification, exit_type_),
  };
  ExitNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitNotification_descriptor_,
      ExitNotification::default_instance_,
      ExitNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitNotification));
  DeviceStatusChangeNotification_descriptor_ = file->message_type(37);
  static const int DeviceStatusChangeNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusChangeNotification, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusChangeNotification, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusChangeNotification, type_),
  };
  DeviceStatusChangeNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceStatusChangeNotification_descriptor_,
      DeviceStatusChangeNotification::default_instance_,
      DeviceStatusChangeNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusChangeNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusChangeNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceStatusChangeNotification));
  CommonMessage_descriptor_ = file->message_type(38);
  static const int CommonMessage_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, login_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, login_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, check_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, check_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, oil_quantity_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, oil_quantity_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, production_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, production_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, distance_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, distance_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, times_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, times_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, oiling_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, oiling_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, load_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, load_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, unload_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, unload_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, speed_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, short_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, gps_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, audio_file_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, capture_file_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, materials_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, anticollision_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, edipperinfo_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, get_edippers_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, get_edippers_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, load_complete_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, cancel_load_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, cancel_load_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, reject_load_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, reject_load_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, exit_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, device_status_change_notification_),
  };
  CommonMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonMessage_descriptor_,
      CommonMessage::default_instance_,
      CommonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonMessage));
  MessageType_descriptor_ = file->enum_type(0);
  CarType_descriptor_ = file->enum_type(1);
  RunningStatus_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckRequest_descriptor_, &CheckRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckResponse_descriptor_, &CheckResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OilQuantityRequest_descriptor_, &OilQuantityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OilQuantityResponse_descriptor_, &OilQuantityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductionRequest_descriptor_, &ProductionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductionResponse_descriptor_, &ProductionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DistanceRequest_descriptor_, &DistanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DistanceResponse_descriptor_, &DistanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimesRequest_descriptor_, &TimesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimesResponse_descriptor_, &TimesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OilingRequest_descriptor_, &OilingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OilingResponse_descriptor_, &OilingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadRequest_descriptor_, &LoadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadResponse_descriptor_, &LoadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnloadRequest_descriptor_, &UnloadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnloadResponse_descriptor_, &UnloadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedLimitMessage_descriptor_, &SpeedLimitMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShortMessage_descriptor_, &ShortMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSData_descriptor_, &GPSData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioFileData_descriptor_, &AudioFileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaptureFileData_descriptor_, &CaptureFileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Material_descriptor_, &Material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialsNotification_descriptor_, &MaterialsNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollisionCarInfo_descriptor_, &CollisionCarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AntiCollisionNotification_descriptor_, &AntiCollisionNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EDipperInfo_descriptor_, &EDipperInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EDipperInfoNotification_descriptor_, &EDipperInfoNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEDippersRequest_descriptor_, &GetEDippersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEDippersResponse_descriptor_, &GetEDippersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadCompleteNotification_descriptor_, &LoadCompleteNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelLoadRequest_descriptor_, &CancelLoadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelLoadResponse_descriptor_, &CancelLoadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RejectLoadRequest_descriptor_, &RejectLoadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RejectLoadResponse_descriptor_, &RejectLoadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitNotification_descriptor_, &ExitNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceStatusChangeNotification_descriptor_, &DeviceStatusChangeNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonMessage_descriptor_, &CommonMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete CheckRequest::default_instance_;
  delete CheckRequest_reflection_;
  delete CheckResponse::default_instance_;
  delete CheckResponse_reflection_;
  delete OilQuantityRequest::default_instance_;
  delete OilQuantityRequest_reflection_;
  delete OilQuantityResponse::default_instance_;
  delete OilQuantityResponse_reflection_;
  delete ProductionRequest::default_instance_;
  delete ProductionRequest_reflection_;
  delete ProductionResponse::default_instance_;
  delete ProductionResponse_reflection_;
  delete DistanceRequest::default_instance_;
  delete DistanceRequest_reflection_;
  delete DistanceResponse::default_instance_;
  delete DistanceResponse_reflection_;
  delete TimesRequest::default_instance_;
  delete TimesRequest_reflection_;
  delete TimesResponse::default_instance_;
  delete TimesResponse_reflection_;
  delete OilingRequest::default_instance_;
  delete OilingRequest_reflection_;
  delete OilingResponse::default_instance_;
  delete OilingResponse_reflection_;
  delete LoadRequest::default_instance_;
  delete LoadRequest_reflection_;
  delete LoadResponse::default_instance_;
  delete LoadResponse_reflection_;
  delete UnloadRequest::default_instance_;
  delete UnloadRequest_reflection_;
  delete UnloadResponse::default_instance_;
  delete UnloadResponse_reflection_;
  delete SpeedLimitMessage::default_instance_;
  delete SpeedLimitMessage_reflection_;
  delete ShortMessage::default_instance_;
  delete ShortMessage_reflection_;
  delete GPSData::default_instance_;
  delete GPSData_reflection_;
  delete AudioFileData::default_instance_;
  delete AudioFileData_reflection_;
  delete CaptureFileData::default_instance_;
  delete CaptureFileData_reflection_;
  delete Material::default_instance_;
  delete Material_reflection_;
  delete MaterialsNotification::default_instance_;
  delete MaterialsNotification_reflection_;
  delete CollisionCarInfo::default_instance_;
  delete CollisionCarInfo_reflection_;
  delete AntiCollisionNotification::default_instance_;
  delete AntiCollisionNotification_reflection_;
  delete EDipperInfo::default_instance_;
  delete EDipperInfo_reflection_;
  delete EDipperInfoNotification::default_instance_;
  delete EDipperInfoNotification_reflection_;
  delete GetEDippersRequest::default_instance_;
  delete GetEDippersRequest_reflection_;
  delete GetEDippersResponse::default_instance_;
  delete GetEDippersResponse_reflection_;
  delete LoadCompleteNotification::default_instance_;
  delete LoadCompleteNotification_reflection_;
  delete CancelLoadRequest::default_instance_;
  delete CancelLoadRequest_reflection_;
  delete CancelLoadResponse::default_instance_;
  delete CancelLoadResponse_reflection_;
  delete RejectLoadRequest::default_instance_;
  delete RejectLoadRequest_reflection_;
  delete RejectLoadResponse::default_instance_;
  delete RejectLoadResponse_reflection_;
  delete ExitNotification::default_instance_;
  delete ExitNotification_reflection_;
  delete DeviceStatusChangeNotification::default_instance_;
  delete DeviceStatusChangeNotification_reflection_;
  delete CommonMessage::default_instance_;
  delete CommonMessage_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\006zaoxun\"!\n\014LoginRequest\022\021\n\td"
    "evice_id\030\001 \001(\t\"\214\001\n\rLoginResponse\022\021\n\tdevi"
    "ce_id\030\001 \001(\t\022\016\n\006result\030\002 \001(\005\022\035\n\004type\030\003 \001("
    "\0162\017.zaoxun.CarType\022\016\n\006car_no\030\004 \001(\t\022)\n\nru"
    "n_status\030\005 \001(\0162\025.zaoxun.RunningStatus\"!\n"
    "\014CheckRequest\022\021\n\tdevice_id\030\001 \001(\t\"2\n\rChec"
    "kResponse\022\021\n\tdevice_id\030\001 \001(\t\022\016\n\006status\030\002"
    " \001(\005\"\'\n\022OilQuantityRequest\022\021\n\tdevice_id\030"
    "\001 \001(\t\":\n\023OilQuantityResponse\022\021\n\tdevice_i"
    "d\030\001 \001(\t\022\020\n\010quantity\030\003 \001(\001\"6\n\021ProductionR"
    "equest\022\021\n\tdevice_id\030\001 \001(\t\022\016\n\006period\030\002 \001("
    "\005\"I\n\022ProductionResponse\022\021\n\tdevice_id\030\001 \001"
    "(\t\022\016\n\006period\030\002 \001(\005\022\020\n\010quantity\030\003 \001(\001\"4\n\017"
    "DistanceRequest\022\021\n\tdevice_id\030\001 \001(\t\022\016\n\006pe"
    "riod\030\002 \001(\005\"G\n\020DistanceResponse\022\021\n\tdevice"
    "_id\030\001 \001(\t\022\016\n\006period\030\002 \001(\005\022\020\n\010distance\030\003 "
    "\001(\001\"1\n\014TimesRequest\022\021\n\tdevice_id\030\001 \001(\t\022\016"
    "\n\006period\030\002 \001(\005\"A\n\rTimesResponse\022\021\n\tdevic"
    "e_id\030\001 \001(\t\022\016\n\006period\030\002 \001(\005\022\r\n\005times\030\003 \001("
    "\005\"B\n\rOilingRequest\022\021\n\tdevice_id\030\001 \001(\t\022\016\n"
    "\006target\030\002 \001(\t\022\016\n\006volume\030\003 \001(\001\"S\n\016OilingR"
    "esponse\022\021\n\tdevice_id\030\001 \001(\t\022\016\n\006target\030\002 \001"
    "(\t\022\016\n\006volume\030\003 \001(\001\022\016\n\006result\030\004 \001(\005\"K\n\013Lo"
    "adRequest\022\021\n\tdevice_id\030\001 \001(\t\022\031\n\021edipper_"
    "device_id\030\002 \001(\t\022\016\n\006car_no\030\003 \001(\t\"a\n\014LoadR"
    "esponse\022\021\n\tdevice_id\030\001 \001(\t\022\031\n\021edipper_de"
    "vice_id\030\002 \001(\t\022\023\n\013material_id\030\003 \001(\005\022\016\n\006re"
    "sult\030\004 \001(\005\"=\n\rUnloadRequest\022\021\n\tdevice_id"
    "\030\001 \001(\t\022\031\n\021edipper_device_id\030\002 \001(\t\"3\n\016Unl"
    "oadResponse\022\021\n\tdevice_id\030\001 \001(\t\022\016\n\006result"
    "\030\002 \001(\005\"5\n\021SpeedLimitMessage\022\021\n\tdevice_id"
    "\030\001 \001(\t\022\r\n\005speed\030\002 \001(\001\"G\n\014ShortMessage\022\021\n"
    "\tdevice_id\030\001 \001(\t\022\023\n\013dest_device\030\002 \001(\t\022\017\n"
    "\007content\030\003 \001(\t\"\365\001\n\007GPSData\022\021\n\tdevice_id\030"
    "\001 \001(\t\022\014\n\004time\030\002 \001(\t\022\020\n\010latitude\030\003 \001(\t\022\021\n"
    "\tlongitude\030\004 \001(\t\022\r\n\005speed\030\005 \001(\t\022\021\n\televa"
    "tion\030\006 \001(\t\022\021\n\tdirection\030\007 \001(\t\022\016\n\006radius\030"
    "\010 \001(\t\022\017\n\007loctype\030\t \001(\t\022\017\n\007addrstr\030\n \001(\t\022"
    "\020\n\010province\030\013 \001(\t\022\014\n\004city\030\014 \001(\t\022\020\n\010distr"
    "ict\030\r \001(\t\022\013\n\003poi\030\016 \001(\t\"\247\001\n\rAudioFileData"
    "\022\021\n\tdevice_id\030\001 \001(\t\022\014\n\004time\030\002 \001(\t\022\021\n\tfil"
    "e_name\030\003 \001(\t\022\023\n\013dest_device\030\004 \001(\t\022\025\n\rtot"
    "al_packets\030\005 \001(\005\022\026\n\016current_packet\030\006 \001(\005"
    "\022\020\n\010data_len\030\007 \001(\005\022\014\n\004data\030\010 \001(\014\"\224\001\n\017Cap"
    "tureFileData\022\021\n\tdevice_id\030\001 \001(\t\022\014\n\004time\030"
    "\002 \001(\t\022\021\n\tfile_name\030\003 \001(\t\022\025\n\rtotal_packet"
    "s\030\004 \001(\005\022\026\n\016current_packet\030\005 \001(\005\022\020\n\010data_"
    "len\030\006 \001(\005\022\014\n\004data\030\007 \001(\014\"K\n\010Material\022\023\n\013m"
    "aterial_id\030\001 \001(\005\022\024\n\014english_name\030\002 \001(\t\022\024"
    "\n\014chinese_name\030\003 \001(\t\";\n\025MaterialsNotific"
    "ation\022\"\n\010material\030\001 \003(\0132\020.zaoxun.Materia"
    "l\"\232\001\n\020CollisionCarInfo\022\021\n\tdevice_id\030\001 \001("
    "\t\022\035\n\004type\030\002 \001(\0162\017.zaoxun.CarType\022\016\n\006car_"
    "no\030\003 \001(\t\022\r\n\005level\030\004 \001(\005\022\020\n\010distance\030\005 \001("
    "\001\022\021\n\tlongitude\030\006 \001(\001\022\020\n\010latitude\030\007 \001(\001\"*"
    "\n\031AntiCollisionNotification\022\r\n\005angle\030\001 \003"
    "(\001\"X\n\013EDipperInfo\022\021\n\tdevice_id\030\001 \001(\t\022\021\n\t"
    "device_no\030\002 \001(\t\022\021\n\tlongitude\030\003 \001(\001\022\020\n\010la"
    "titude\030\004 \001(\001\"=\n\027EDipperInfoNotification\022"
    "\"\n\005infos\030\001 \003(\0132\023.zaoxun.EDipperInfo\"\'\n\022G"
    "etEDippersRequest\022\021\n\tdevice_id\030\001 \001(\t\"O\n\023"
    "GetEDippersResponse\022\021\n\tdevice_id\030\001 \001(\t\022%"
    "\n\010edippers\030\002 \003(\0132\023.zaoxun.EDipperInfo\"a\n"
    "\030LoadCompleteNotification\022\031\n\021edipper_dev"
    "ice_id\030\001 \001(\t\022\025\n\rcar_device_id\030\002 \001(\t\022\023\n\013l"
    "oad_result\030\003 \001(\005\"E\n\021CancelLoadRequest\022\025\n"
    "\rcar_device_id\030\001 \001(\t\022\031\n\021edipper_device_i"
    "d\030\002 \001(\t\"V\n\022CancelLoadResponse\022\025\n\rcar_dev"
    "ice_id\030\001 \001(\t\022\031\n\021edipper_device_id\030\002 \001(\t\022"
    "\016\n\006result\030\003 \001(\005\"E\n\021RejectLoadRequest\022\031\n\021"
    "edipper_device_id\030\001 \001(\t\022\025\n\rcar_device_id"
    "\030\002 \001(\t\"V\n\022RejectLoadResponse\022\031\n\021edipper_"
    "device_id\030\001 \001(\t\022\025\n\rcar_device_id\030\002 \001(\t\022\016"
    "\n\006result\030\003 \001(\005\"8\n\020ExitNotification\022\021\n\tde"
    "vice_id\030\001 \001(\t\022\021\n\texit_type\030\002 \001(\005\"h\n\036Devi"
    "ceStatusChangeNotification\022\021\n\tdevice_id\030"
    "\001 \001(\t\022%\n\006status\030\002 \001(\0162\025.zaoxun.RunningSt"
    "atus\022\014\n\004type\030\003 \001(\005\"\201\017\n\rCommonMessage\022!\n\004"
    "type\030\001 \001(\0162\023.zaoxun.MessageType\022+\n\rlogin"
    "_request\030\002 \001(\0132\024.zaoxun.LoginRequest\022-\n\016"
    "login_response\030\003 \001(\0132\025.zaoxun.LoginRespo"
    "nse\022+\n\rcheck_request\030\004 \001(\0132\024.zaoxun.Chec"
    "kRequest\022-\n\016check_response\030\005 \001(\0132\025.zaoxu"
    "n.CheckResponse\0228\n\024oil_quantity_request\030"
    "\006 \001(\0132\032.zaoxun.OilQuantityRequest\022:\n\025oil"
    "_quantity_response\030\007 \001(\0132\033.zaoxun.OilQua"
    "ntityResponse\0225\n\022production_request\030\010 \001("
    "\0132\031.zaoxun.ProductionRequest\0227\n\023producti"
    "on_response\030\t \001(\0132\032.zaoxun.ProductionRes"
    "ponse\0221\n\020distance_request\030\n \001(\0132\027.zaoxun"
    ".DistanceRequest\0223\n\021distance_response\030\013 "
    "\001(\0132\030.zaoxun.DistanceResponse\022+\n\rtimes_r"
    "equest\030\014 \001(\0132\024.zaoxun.TimesRequest\022-\n\016ti"
    "mes_response\030\r \001(\0132\025.zaoxun.TimesRespons"
    "e\022-\n\016oiling_request\030\016 \001(\0132\025.zaoxun.Oilin"
    "gRequest\022/\n\017oiling_response\030\017 \001(\0132\026.zaox"
    "un.OilingResponse\022)\n\014load_request\030\020 \001(\0132"
    "\023.zaoxun.LoadRequest\022+\n\rload_response\030\021 "
    "\001(\0132\024.zaoxun.LoadResponse\022-\n\016unload_requ"
    "est\030\022 \001(\0132\025.zaoxun.UnloadRequest\022/\n\017unlo"
    "ad_response\030\023 \001(\0132\026.zaoxun.UnloadRespons"
    "e\022.\n\013speed_limit\030\024 \001(\0132\031.zaoxun.SpeedLim"
    "itMessage\022+\n\rshort_message\030\025 \001(\0132\024.zaoxu"
    "n.ShortMessage\022!\n\010gps_data\030\026 \001(\0132\017.zaoxu"
    "n.GPSData\022.\n\017audio_file_data\030\027 \001(\0132\025.zao"
    "xun.AudioFileData\0222\n\021capture_file_data\030\030"
    " \001(\0132\027.zaoxun.CaptureFileData\022=\n\026materia"
    "ls_notification\030\031 \001(\0132\035.zaoxun.Materials"
    "Notification\022E\n\032anticollision_notificati"
    "on\030\032 \001(\0132!.zaoxun.AntiCollisionNotificat"
    "ion\022A\n\030edipperinfo_notification\030\033 \001(\0132\037."
    "zaoxun.EDipperInfoNotification\0228\n\024get_ed"
    "ippers_request\030\034 \001(\0132\032.zaoxun.GetEDipper"
    "sRequest\022:\n\025get_edippers_response\030\035 \001(\0132"
    "\033.zaoxun.GetEDippersResponse\022D\n\032load_com"
    "plete_notification\030\036 \001(\0132 .zaoxun.LoadCo"
    "mpleteNotification\0226\n\023cancel_load_reques"
    "t\030\037 \001(\0132\031.zaoxun.CancelLoadRequest\0228\n\024ca"
    "ncel_load_response\030  \001(\0132\032.zaoxun.Cancel"
    "LoadResponse\0226\n\023reject_load_request\030! \001("
    "\0132\031.zaoxun.RejectLoadRequest\0228\n\024reject_l"
    "oad_response\030\" \001(\0132\032.zaoxun.RejectLoadRe"
    "sponse\0223\n\021exit_notification\030# \001(\0132\030.zaox"
    "un.ExitNotification\022Q\n!device_status_cha"
    "nge_notification\030$ \001(\0132&.zaoxun.DeviceSt"
    "atusChangeNotification*\276\006\n\013MessageType\022\021"
    "\n\rLOGIN_REQUEST\020\001\022\022\n\016LOGIN_RESPONSE\020\002\022\021\n"
    "\rCHECK_REQUEST\020\003\022\022\n\016CHECK_RESPONSE\020\004\022\030\n\024"
    "OIL_QUANTITY_REQUEST\020\005\022\031\n\025OIL_QUANTITY_R"
    "ESPONSE\020\006\022\026\n\022PRODUCTION_REQUEST\020\007\022\027\n\023PRO"
    "DUCTION_RESPONSE\020\010\022\024\n\020DISTANCE_REQUEST\020\t"
    "\022\025\n\021DISTANCE_RESPONSE\020\n\022\021\n\rTIMES_REQUEST"
    "\020\013\022\022\n\016TIMES_RESPONSE\020\014\022\022\n\016OILING_REQUEST"
    "\020\r\022\023\n\017OILING_RESPONSE\020\016\022\020\n\014LOAD_REQUEST\020"
    "\017\022\021\n\rLOAD_RESPONSE\020\020\022\022\n\016UNLOAD_REQUEST\020\021"
    "\022\023\n\017UNLOAD_RESPONSE\020\022\022\017\n\013SPEED_LIMIT\020\023\022\021"
    "\n\rSHORT_MESSAGE\020\024\022\014\n\010GPS_DATA\020\025\022\023\n\017AUDIO"
    "_FILE_DATA\020\026\022\025\n\021CAPTURE_FILE_DATA\020\027\022\032\n\026M"
    "ATERIALS_NOTIFICATION\020\030\022\037\n\033ANTI_COLLISIO"
    "N_NOTIFICATION\020\031\022\034\n\030EDIPPERINFO_NOTIFICA"
    "TION\020\032\022\030\n\024GET_EDIPPERS_REQUEST\020\033\022\031\n\025GET_"
    "EDIPPERS_RESPONSE\020\034\022\036\n\032LOAD_COMPLETE_NOT"
    "IFICATION\020\035\022\027\n\023CANCEL_LOAD_REQUEST\020\036\022\030\n\024"
    "CANCEL_LOAD_RESPONSE\020\037\022\027\n\023REJECT_LOAD_RE"
    "QUEST\020 \022\030\n\024REJECT_LOAD_RESPONSE\020!\022\025\n\021EXI"
    "T_NOTIFICATION\020\"\022%\n!DEVICE_STATUS_CHANGE"
    "_NOTIFICATION\020#*P\n\007CarType\022\014\n\010MINE_CAR\020\001"
    "\022\014\n\010E_DIPPER\020\002\022\013\n\007OIL_CAR\020\003\022\r\n\tWATER_CAR"
    "\020\004\022\r\n\tOTHER_CAR\020\005*5\n\rRunningStatus\022\013\n\007RU"
    "NNING\020\001\022\n\n\006CLOSED\020\002\022\013\n\007UNKNOWN\020\003", 5992);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  CheckRequest::default_instance_ = new CheckRequest();
  CheckResponse::default_instance_ = new CheckResponse();
  OilQuantityRequest::default_instance_ = new OilQuantityRequest();
  OilQuantityResponse::default_instance_ = new OilQuantityResponse();
  ProductionRequest::default_instance_ = new ProductionRequest();
  ProductionResponse::default_instance_ = new ProductionResponse();
  DistanceRequest::default_instance_ = new DistanceRequest();
  DistanceResponse::default_instance_ = new DistanceResponse();
  TimesRequest::default_instance_ = new TimesRequest();
  TimesResponse::default_instance_ = new TimesResponse();
  OilingRequest::default_instance_ = new OilingRequest();
  OilingResponse::default_instance_ = new OilingResponse();
  LoadRequest::default_instance_ = new LoadRequest();
  LoadResponse::default_instance_ = new LoadResponse();
  UnloadRequest::default_instance_ = new UnloadRequest();
  UnloadResponse::default_instance_ = new UnloadResponse();
  SpeedLimitMessage::default_instance_ = new SpeedLimitMessage();
  ShortMessage::default_instance_ = new ShortMessage();
  GPSData::default_instance_ = new GPSData();
  AudioFileData::default_instance_ = new AudioFileData();
  CaptureFileData::default_instance_ = new CaptureFileData();
  Material::default_instance_ = new Material();
  MaterialsNotification::default_instance_ = new MaterialsNotification();
  CollisionCarInfo::default_instance_ = new CollisionCarInfo();
  AntiCollisionNotification::default_instance_ = new AntiCollisionNotification();
  EDipperInfo::default_instance_ = new EDipperInfo();
  EDipperInfoNotification::default_instance_ = new EDipperInfoNotification();
  GetEDippersRequest::default_instance_ = new GetEDippersRequest();
  GetEDippersResponse::default_instance_ = new GetEDippersResponse();
  LoadCompleteNotification::default_instance_ = new LoadCompleteNotification();
  CancelLoadRequest::default_instance_ = new CancelLoadRequest();
  CancelLoadResponse::default_instance_ = new CancelLoadResponse();
  RejectLoadRequest::default_instance_ = new RejectLoadRequest();
  RejectLoadResponse::default_instance_ = new RejectLoadResponse();
  ExitNotification::default_instance_ = new ExitNotification();
  DeviceStatusChangeNotification::default_instance_ = new DeviceStatusChangeNotification();
  CommonMessage::default_instance_ = new CommonMessage();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  CheckRequest::default_instance_->InitAsDefaultInstance();
  CheckResponse::default_instance_->InitAsDefaultInstance();
  OilQuantityRequest::default_instance_->InitAsDefaultInstance();
  OilQuantityResponse::default_instance_->InitAsDefaultInstance();
  ProductionRequest::default_instance_->InitAsDefaultInstance();
  ProductionResponse::default_instance_->InitAsDefaultInstance();
  DistanceRequest::default_instance_->InitAsDefaultInstance();
  DistanceResponse::default_instance_->InitAsDefaultInstance();
  TimesRequest::default_instance_->InitAsDefaultInstance();
  TimesResponse::default_instance_->InitAsDefaultInstance();
  OilingRequest::default_instance_->InitAsDefaultInstance();
  OilingResponse::default_instance_->InitAsDefaultInstance();
  LoadRequest::default_instance_->InitAsDefaultInstance();
  LoadResponse::default_instance_->InitAsDefaultInstance();
  UnloadRequest::default_instance_->InitAsDefaultInstance();
  UnloadResponse::default_instance_->InitAsDefaultInstance();
  SpeedLimitMessage::default_instance_->InitAsDefaultInstance();
  ShortMessage::default_instance_->InitAsDefaultInstance();
  GPSData::default_instance_->InitAsDefaultInstance();
  AudioFileData::default_instance_->InitAsDefaultInstance();
  CaptureFileData::default_instance_->InitAsDefaultInstance();
  Material::default_instance_->InitAsDefaultInstance();
  MaterialsNotification::default_instance_->InitAsDefaultInstance();
  CollisionCarInfo::default_instance_->InitAsDefaultInstance();
  AntiCollisionNotification::default_instance_->InitAsDefaultInstance();
  EDipperInfo::default_instance_->InitAsDefaultInstance();
  EDipperInfoNotification::default_instance_->InitAsDefaultInstance();
  GetEDippersRequest::default_instance_->InitAsDefaultInstance();
  GetEDippersResponse::default_instance_->InitAsDefaultInstance();
  LoadCompleteNotification::default_instance_->InitAsDefaultInstance();
  CancelLoadRequest::default_instance_->InitAsDefaultInstance();
  CancelLoadResponse::default_instance_->InitAsDefaultInstance();
  RejectLoadRequest::default_instance_->InitAsDefaultInstance();
  RejectLoadResponse::default_instance_->InitAsDefaultInstance();
  ExitNotification::default_instance_->InitAsDefaultInstance();
  DeviceStatusChangeNotification::default_instance_->InitAsDefaultInstance();
  CommonMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarType_descriptor_;
}
bool CarType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RunningStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunningStatus_descriptor_;
}
bool RunningStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kDeviceIdFieldNumber;
const int LoginResponse::kResultFieldNumber;
const int LoginResponse::kTypeFieldNumber;
const int LoginResponse::kCarNoFieldNumber;
const int LoginResponse::kRunStatusFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  type_ = 1;
  car_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  run_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (car_no_ != &::google::protobuf::internal::kEmptyString) {
    delete car_no_;
  }
  if (this != default_instance_) {
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    result_ = 0;
    type_ = 1;
    if (has_car_no()) {
      if (car_no_ != &::google::protobuf::internal::kEmptyString) {
        car_no_->clear();
      }
    }
    run_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .zaoxun.CarType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zaoxun::CarType_IsValid(value)) {
            set_type(static_cast< ::zaoxun::CarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_car_no;
        break;
      }

      // optional string car_no = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_car_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->car_no().data(), this->car_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_run_status;
        break;
      }

      // optional .zaoxun.RunningStatus run_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_run_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zaoxun::RunningStatus_IsValid(value)) {
            set_run_status(static_cast< ::zaoxun::RunningStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional .zaoxun.CarType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string car_no = 4;
  if (has_car_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_no().data(), this->car_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->car_no(), output);
  }

  // optional .zaoxun.RunningStatus run_status = 5;
  if (has_run_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->run_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional .zaoxun.CarType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string car_no = 4;
  if (has_car_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_no().data(), this->car_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->car_no(), target);
  }

  // optional .zaoxun.RunningStatus run_status = 5;
  if (has_run_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->run_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .zaoxun.CarType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string car_no = 4;
    if (has_car_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->car_no());
    }

    // optional .zaoxun.RunningStatus run_status = 5;
    if (has_run_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->run_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_car_no()) {
      set_car_no(from.car_no());
    }
    if (from.has_run_status()) {
      set_run_status(from.run_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(car_no_, other->car_no_);
    std::swap(run_status_, other->run_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckRequest::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

CheckRequest::CheckRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckRequest::InitAsDefaultInstance() {
}

CheckRequest::CheckRequest(const CheckRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckRequest::~CheckRequest() {
  SharedDtor();
}

void CheckRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void CheckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckRequest_descriptor_;
}

const CheckRequest& CheckRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CheckRequest* CheckRequest::default_instance_ = NULL;

CheckRequest* CheckRequest::New() const {
  return new CheckRequest;
}

void CheckRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckRequest::MergeFrom(const CheckRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRequest::CopyFrom(const CheckRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRequest::IsInitialized() const {

  return true;
}

void CheckRequest::Swap(CheckRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckRequest_descriptor_;
  metadata.reflection = CheckRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckResponse::kDeviceIdFieldNumber;
const int CheckResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

CheckResponse::CheckResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckResponse::InitAsDefaultInstance() {
}

CheckResponse::CheckResponse(const CheckResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckResponse::~CheckResponse() {
  SharedDtor();
}

void CheckResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void CheckResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckResponse_descriptor_;
}

const CheckResponse& CheckResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CheckResponse* CheckResponse::default_instance_ = NULL;

CheckResponse* CheckResponse::New() const {
  return new CheckResponse;
}

void CheckResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckResponse::MergeFrom(const CheckResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponse::CopyFrom(const CheckResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponse::IsInitialized() const {

  return true;
}

void CheckResponse::Swap(CheckResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckResponse_descriptor_;
  metadata.reflection = CheckResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OilQuantityRequest::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

OilQuantityRequest::OilQuantityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OilQuantityRequest::InitAsDefaultInstance() {
}

OilQuantityRequest::OilQuantityRequest(const OilQuantityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OilQuantityRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OilQuantityRequest::~OilQuantityRequest() {
  SharedDtor();
}

void OilQuantityRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void OilQuantityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OilQuantityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OilQuantityRequest_descriptor_;
}

const OilQuantityRequest& OilQuantityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OilQuantityRequest* OilQuantityRequest::default_instance_ = NULL;

OilQuantityRequest* OilQuantityRequest::New() const {
  return new OilQuantityRequest;
}

void OilQuantityRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OilQuantityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OilQuantityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OilQuantityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OilQuantityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OilQuantityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OilQuantityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OilQuantityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OilQuantityRequest::MergeFrom(const OilQuantityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OilQuantityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OilQuantityRequest::CopyFrom(const OilQuantityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OilQuantityRequest::IsInitialized() const {

  return true;
}

void OilQuantityRequest::Swap(OilQuantityRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OilQuantityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OilQuantityRequest_descriptor_;
  metadata.reflection = OilQuantityRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OilQuantityResponse::kDeviceIdFieldNumber;
const int OilQuantityResponse::kQuantityFieldNumber;
#endif  // !_MSC_VER

OilQuantityResponse::OilQuantityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OilQuantityResponse::InitAsDefaultInstance() {
}

OilQuantityResponse::OilQuantityResponse(const OilQuantityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OilQuantityResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OilQuantityResponse::~OilQuantityResponse() {
  SharedDtor();
}

void OilQuantityResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void OilQuantityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OilQuantityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OilQuantityResponse_descriptor_;
}

const OilQuantityResponse& OilQuantityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OilQuantityResponse* OilQuantityResponse::default_instance_ = NULL;

OilQuantityResponse* OilQuantityResponse::New() const {
  return new OilQuantityResponse;
}

void OilQuantityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OilQuantityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_quantity;
        break;
      }

      // optional double quantity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OilQuantityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional double quantity = 3;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OilQuantityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional double quantity = 3;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OilQuantityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional double quantity = 3;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OilQuantityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OilQuantityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OilQuantityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OilQuantityResponse::MergeFrom(const OilQuantityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OilQuantityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OilQuantityResponse::CopyFrom(const OilQuantityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OilQuantityResponse::IsInitialized() const {

  return true;
}

void OilQuantityResponse::Swap(OilQuantityResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OilQuantityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OilQuantityResponse_descriptor_;
  metadata.reflection = OilQuantityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductionRequest::kDeviceIdFieldNumber;
const int ProductionRequest::kPeriodFieldNumber;
#endif  // !_MSC_VER

ProductionRequest::ProductionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductionRequest::InitAsDefaultInstance() {
}

ProductionRequest::ProductionRequest(const ProductionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductionRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductionRequest::~ProductionRequest() {
  SharedDtor();
}

void ProductionRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void ProductionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductionRequest_descriptor_;
}

const ProductionRequest& ProductionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ProductionRequest* ProductionRequest::default_instance_ = NULL;

ProductionRequest* ProductionRequest::New() const {
  return new ProductionRequest;
}

void ProductionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    period_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // optional int32 period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductionRequest::MergeFrom(const ProductionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductionRequest::CopyFrom(const ProductionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductionRequest::IsInitialized() const {

  return true;
}

void ProductionRequest::Swap(ProductionRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductionRequest_descriptor_;
  metadata.reflection = ProductionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductionResponse::kDeviceIdFieldNumber;
const int ProductionResponse::kPeriodFieldNumber;
const int ProductionResponse::kQuantityFieldNumber;
#endif  // !_MSC_VER

ProductionResponse::ProductionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductionResponse::InitAsDefaultInstance() {
}

ProductionResponse::ProductionResponse(const ProductionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductionResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  period_ = 0;
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductionResponse::~ProductionResponse() {
  SharedDtor();
}

void ProductionResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void ProductionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductionResponse_descriptor_;
}

const ProductionResponse& ProductionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ProductionResponse* ProductionResponse::default_instance_ = NULL;

ProductionResponse* ProductionResponse::New() const {
  return new ProductionResponse;
}

void ProductionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    period_ = 0;
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // optional int32 period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_quantity;
        break;
      }

      // optional double quantity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period(), output);
  }

  // optional double quantity = 3;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period(), target);
  }

  // optional double quantity = 3;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

    // optional double quantity = 3;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductionResponse::MergeFrom(const ProductionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductionResponse::CopyFrom(const ProductionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductionResponse::IsInitialized() const {

  return true;
}

void ProductionResponse::Swap(ProductionResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(period_, other->period_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductionResponse_descriptor_;
  metadata.reflection = ProductionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DistanceRequest::kDeviceIdFieldNumber;
const int DistanceRequest::kPeriodFieldNumber;
#endif  // !_MSC_VER

DistanceRequest::DistanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DistanceRequest::InitAsDefaultInstance() {
}

DistanceRequest::DistanceRequest(const DistanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DistanceRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DistanceRequest::~DistanceRequest() {
  SharedDtor();
}

void DistanceRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void DistanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DistanceRequest_descriptor_;
}

const DistanceRequest& DistanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

DistanceRequest* DistanceRequest::default_instance_ = NULL;

DistanceRequest* DistanceRequest::New() const {
  return new DistanceRequest;
}

void DistanceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    period_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DistanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // optional int32 period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DistanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DistanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DistanceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DistanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DistanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DistanceRequest::MergeFrom(const DistanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DistanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceRequest::CopyFrom(const DistanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceRequest::IsInitialized() const {

  return true;
}

void DistanceRequest::Swap(DistanceRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DistanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DistanceRequest_descriptor_;
  metadata.reflection = DistanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DistanceResponse::kDeviceIdFieldNumber;
const int DistanceResponse::kPeriodFieldNumber;
const int DistanceResponse::kDistanceFieldNumber;
#endif  // !_MSC_VER

DistanceResponse::DistanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DistanceResponse::InitAsDefaultInstance() {
}

DistanceResponse::DistanceResponse(const DistanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DistanceResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  period_ = 0;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DistanceResponse::~DistanceResponse() {
  SharedDtor();
}

void DistanceResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void DistanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DistanceResponse_descriptor_;
}

const DistanceResponse& DistanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

DistanceResponse* DistanceResponse::default_instance_ = NULL;

DistanceResponse* DistanceResponse::New() const {
  return new DistanceResponse;
}

void DistanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    period_ = 0;
    distance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DistanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // optional int32 period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_distance;
        break;
      }

      // optional double distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DistanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period(), output);
  }

  // optional double distance = 3;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->distance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DistanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period(), target);
  }

  // optional double distance = 3;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->distance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DistanceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

    // optional double distance = 3;
    if (has_distance()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DistanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DistanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DistanceResponse::MergeFrom(const DistanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DistanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceResponse::CopyFrom(const DistanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceResponse::IsInitialized() const {

  return true;
}

void DistanceResponse::Swap(DistanceResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(period_, other->period_);
    std::swap(distance_, other->distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DistanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DistanceResponse_descriptor_;
  metadata.reflection = DistanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimesRequest::kDeviceIdFieldNumber;
const int TimesRequest::kPeriodFieldNumber;
#endif  // !_MSC_VER

TimesRequest::TimesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimesRequest::InitAsDefaultInstance() {
}

TimesRequest::TimesRequest(const TimesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimesRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimesRequest::~TimesRequest() {
  SharedDtor();
}

void TimesRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void TimesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimesRequest_descriptor_;
}

const TimesRequest& TimesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

TimesRequest* TimesRequest::default_instance_ = NULL;

TimesRequest* TimesRequest::New() const {
  return new TimesRequest;
}

void TimesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    period_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // optional int32 period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimesRequest::MergeFrom(const TimesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimesRequest::CopyFrom(const TimesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimesRequest::IsInitialized() const {

  return true;
}

void TimesRequest::Swap(TimesRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimesRequest_descriptor_;
  metadata.reflection = TimesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimesResponse::kDeviceIdFieldNumber;
const int TimesResponse::kPeriodFieldNumber;
const int TimesResponse::kTimesFieldNumber;
#endif  // !_MSC_VER

TimesResponse::TimesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimesResponse::InitAsDefaultInstance() {
}

TimesResponse::TimesResponse(const TimesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimesResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  period_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimesResponse::~TimesResponse() {
  SharedDtor();
}

void TimesResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void TimesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimesResponse_descriptor_;
}

const TimesResponse& TimesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

TimesResponse* TimesResponse::default_instance_ = NULL;

TimesResponse* TimesResponse::New() const {
  return new TimesResponse;
}

void TimesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    period_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // optional int32 period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period(), output);
  }

  // optional int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period(), target);
  }

  // optional int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

    // optional int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimesResponse::MergeFrom(const TimesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimesResponse::CopyFrom(const TimesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimesResponse::IsInitialized() const {

  return true;
}

void TimesResponse::Swap(TimesResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(period_, other->period_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimesResponse_descriptor_;
  metadata.reflection = TimesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OilingRequest::kDeviceIdFieldNumber;
const int OilingRequest::kTargetFieldNumber;
const int OilingRequest::kVolumeFieldNumber;
#endif  // !_MSC_VER

OilingRequest::OilingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OilingRequest::InitAsDefaultInstance() {
}

OilingRequest::OilingRequest(const OilingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OilingRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OilingRequest::~OilingRequest() {
  SharedDtor();
}

void OilingRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void OilingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OilingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OilingRequest_descriptor_;
}

const OilingRequest& OilingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OilingRequest* OilingRequest::default_instance_ = NULL;

OilingRequest* OilingRequest::New() const {
  return new OilingRequest;
}

void OilingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    volume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OilingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // optional string target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_volume;
        break;
      }

      // optional double volume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OilingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target(), output);
  }

  // optional double volume = 3;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OilingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target(), target);
  }

  // optional double volume = 3;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OilingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional double volume = 3;
    if (has_volume()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OilingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OilingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OilingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OilingRequest::MergeFrom(const OilingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OilingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OilingRequest::CopyFrom(const OilingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OilingRequest::IsInitialized() const {

  return true;
}

void OilingRequest::Swap(OilingRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(target_, other->target_);
    std::swap(volume_, other->volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OilingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OilingRequest_descriptor_;
  metadata.reflection = OilingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OilingResponse::kDeviceIdFieldNumber;
const int OilingResponse::kTargetFieldNumber;
const int OilingResponse::kVolumeFieldNumber;
const int OilingResponse::kResultFieldNumber;
#endif  // !_MSC_VER

OilingResponse::OilingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OilingResponse::InitAsDefaultInstance() {
}

OilingResponse::OilingResponse(const OilingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OilingResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OilingResponse::~OilingResponse() {
  SharedDtor();
}

void OilingResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void OilingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OilingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OilingResponse_descriptor_;
}

const OilingResponse& OilingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OilingResponse* OilingResponse::default_instance_ = NULL;

OilingResponse* OilingResponse::New() const {
  return new OilingResponse;
}

void OilingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    volume_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OilingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // optional string target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_volume;
        break;
      }

      // optional double volume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OilingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target(), output);
  }

  // optional double volume = 3;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->volume(), output);
  }

  // optional int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OilingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target(), target);
  }

  // optional double volume = 3;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->volume(), target);
  }

  // optional int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OilingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional double volume = 3;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // optional int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OilingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OilingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OilingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OilingResponse::MergeFrom(const OilingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OilingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OilingResponse::CopyFrom(const OilingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OilingResponse::IsInitialized() const {

  return true;
}

void OilingResponse::Swap(OilingResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(target_, other->target_);
    std::swap(volume_, other->volume_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OilingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OilingResponse_descriptor_;
  metadata.reflection = OilingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadRequest::kDeviceIdFieldNumber;
const int LoadRequest::kEdipperDeviceIdFieldNumber;
const int LoadRequest::kCarNoFieldNumber;
#endif  // !_MSC_VER

LoadRequest::LoadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadRequest::InitAsDefaultInstance() {
}

LoadRequest::LoadRequest(const LoadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  edipper_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  car_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadRequest::~LoadRequest() {
  SharedDtor();
}

void LoadRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete edipper_device_id_;
  }
  if (car_no_ != &::google::protobuf::internal::kEmptyString) {
    delete car_no_;
  }
  if (this != default_instance_) {
  }
}

void LoadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadRequest_descriptor_;
}

const LoadRequest& LoadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

LoadRequest* LoadRequest::default_instance_ = NULL;

LoadRequest* LoadRequest::New() const {
  return new LoadRequest;
}

void LoadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_edipper_device_id()) {
      if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
        edipper_device_id_->clear();
      }
    }
    if (has_car_no()) {
      if (car_no_ != &::google::protobuf::internal::kEmptyString) {
        car_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edipper_device_id;
        break;
      }

      // optional string edipper_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edipper_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edipper_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edipper_device_id().data(), this->edipper_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_car_no;
        break;
      }

      // optional string car_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_car_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->car_no().data(), this->car_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->edipper_device_id(), output);
  }

  // optional string car_no = 3;
  if (has_car_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_no().data(), this->car_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->car_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->edipper_device_id(), target);
  }

  // optional string car_no = 3;
  if (has_car_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_no().data(), this->car_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->car_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string edipper_device_id = 2;
    if (has_edipper_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edipper_device_id());
    }

    // optional string car_no = 3;
    if (has_car_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->car_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadRequest::MergeFrom(const LoadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_edipper_device_id()) {
      set_edipper_device_id(from.edipper_device_id());
    }
    if (from.has_car_no()) {
      set_car_no(from.car_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadRequest::CopyFrom(const LoadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadRequest::IsInitialized() const {

  return true;
}

void LoadRequest::Swap(LoadRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(edipper_device_id_, other->edipper_device_id_);
    std::swap(car_no_, other->car_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadRequest_descriptor_;
  metadata.reflection = LoadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadResponse::kDeviceIdFieldNumber;
const int LoadResponse::kEdipperDeviceIdFieldNumber;
const int LoadResponse::kMaterialIdFieldNumber;
const int LoadResponse::kResultFieldNumber;
#endif  // !_MSC_VER

LoadResponse::LoadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadResponse::InitAsDefaultInstance() {
}

LoadResponse::LoadResponse(const LoadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  edipper_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  material_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadResponse::~LoadResponse() {
  SharedDtor();
}

void LoadResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete edipper_device_id_;
  }
  if (this != default_instance_) {
  }
}

void LoadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadResponse_descriptor_;
}

const LoadResponse& LoadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

LoadResponse* LoadResponse::default_instance_ = NULL;

LoadResponse* LoadResponse::New() const {
  return new LoadResponse;
}

void LoadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_edipper_device_id()) {
      if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
        edipper_device_id_->clear();
      }
    }
    material_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edipper_device_id;
        break;
      }

      // optional string edipper_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edipper_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edipper_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edipper_device_id().data(), this->edipper_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_material_id;
        break;
      }

      // optional int32 material_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_material_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_id_)));
          set_has_material_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->edipper_device_id(), output);
  }

  // optional int32 material_id = 3;
  if (has_material_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->material_id(), output);
  }

  // optional int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->edipper_device_id(), target);
  }

  // optional int32 material_id = 3;
  if (has_material_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->material_id(), target);
  }

  // optional int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string edipper_device_id = 2;
    if (has_edipper_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edipper_device_id());
    }

    // optional int32 material_id = 3;
    if (has_material_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_id());
    }

    // optional int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadResponse::MergeFrom(const LoadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_edipper_device_id()) {
      set_edipper_device_id(from.edipper_device_id());
    }
    if (from.has_material_id()) {
      set_material_id(from.material_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadResponse::CopyFrom(const LoadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadResponse::IsInitialized() const {

  return true;
}

void LoadResponse::Swap(LoadResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(edipper_device_id_, other->edipper_device_id_);
    std::swap(material_id_, other->material_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadResponse_descriptor_;
  metadata.reflection = LoadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnloadRequest::kDeviceIdFieldNumber;
const int UnloadRequest::kEdipperDeviceIdFieldNumber;
#endif  // !_MSC_VER

UnloadRequest::UnloadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnloadRequest::InitAsDefaultInstance() {
}

UnloadRequest::UnloadRequest(const UnloadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnloadRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  edipper_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnloadRequest::~UnloadRequest() {
  SharedDtor();
}

void UnloadRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete edipper_device_id_;
  }
  if (this != default_instance_) {
  }
}

void UnloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnloadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnloadRequest_descriptor_;
}

const UnloadRequest& UnloadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

UnloadRequest* UnloadRequest::default_instance_ = NULL;

UnloadRequest* UnloadRequest::New() const {
  return new UnloadRequest;
}

void UnloadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_edipper_device_id()) {
      if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
        edipper_device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edipper_device_id;
        break;
      }

      // optional string edipper_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edipper_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edipper_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edipper_device_id().data(), this->edipper_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->edipper_device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnloadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->edipper_device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnloadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string edipper_device_id = 2;
    if (has_edipper_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edipper_device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnloadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnloadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnloadRequest::MergeFrom(const UnloadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_edipper_device_id()) {
      set_edipper_device_id(from.edipper_device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloadRequest::CopyFrom(const UnloadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloadRequest::IsInitialized() const {

  return true;
}

void UnloadRequest::Swap(UnloadRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(edipper_device_id_, other->edipper_device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnloadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnloadRequest_descriptor_;
  metadata.reflection = UnloadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnloadResponse::kDeviceIdFieldNumber;
const int UnloadResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UnloadResponse::UnloadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnloadResponse::InitAsDefaultInstance() {
}

UnloadResponse::UnloadResponse(const UnloadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnloadResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnloadResponse::~UnloadResponse() {
  SharedDtor();
}

void UnloadResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void UnloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnloadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnloadResponse_descriptor_;
}

const UnloadResponse& UnloadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

UnloadResponse* UnloadResponse::default_instance_ = NULL;

UnloadResponse* UnloadResponse::New() const {
  return new UnloadResponse;
}

void UnloadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnloadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnloadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnloadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnloadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnloadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnloadResponse::MergeFrom(const UnloadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnloadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloadResponse::CopyFrom(const UnloadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloadResponse::IsInitialized() const {

  return true;
}

void UnloadResponse::Swap(UnloadResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnloadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnloadResponse_descriptor_;
  metadata.reflection = UnloadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedLimitMessage::kDeviceIdFieldNumber;
const int SpeedLimitMessage::kSpeedFieldNumber;
#endif  // !_MSC_VER

SpeedLimitMessage::SpeedLimitMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeedLimitMessage::InitAsDefaultInstance() {
}

SpeedLimitMessage::SpeedLimitMessage(const SpeedLimitMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedLimitMessage::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedLimitMessage::~SpeedLimitMessage() {
  SharedDtor();
}

void SpeedLimitMessage::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void SpeedLimitMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedLimitMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedLimitMessage_descriptor_;
}

const SpeedLimitMessage& SpeedLimitMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

SpeedLimitMessage* SpeedLimitMessage::default_instance_ = NULL;

SpeedLimitMessage* SpeedLimitMessage::New() const {
  return new SpeedLimitMessage;
}

void SpeedLimitMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedLimitMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_speed;
        break;
      }

      // optional double speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedLimitMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional double speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeedLimitMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional double speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeedLimitMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional double speed = 2;
    if (has_speed()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedLimitMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedLimitMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedLimitMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedLimitMessage::MergeFrom(const SpeedLimitMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedLimitMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedLimitMessage::CopyFrom(const SpeedLimitMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedLimitMessage::IsInitialized() const {

  return true;
}

void SpeedLimitMessage::Swap(SpeedLimitMessage* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedLimitMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedLimitMessage_descriptor_;
  metadata.reflection = SpeedLimitMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShortMessage::kDeviceIdFieldNumber;
const int ShortMessage::kDestDeviceFieldNumber;
const int ShortMessage::kContentFieldNumber;
#endif  // !_MSC_VER

ShortMessage::ShortMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShortMessage::InitAsDefaultInstance() {
}

ShortMessage::ShortMessage(const ShortMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShortMessage::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShortMessage::~ShortMessage() {
  SharedDtor();
}

void ShortMessage::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (dest_device_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_device_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ShortMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShortMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShortMessage_descriptor_;
}

const ShortMessage& ShortMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ShortMessage* ShortMessage::default_instance_ = NULL;

ShortMessage* ShortMessage::New() const {
  return new ShortMessage;
}

void ShortMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_dest_device()) {
      if (dest_device_ != &::google::protobuf::internal::kEmptyString) {
        dest_device_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShortMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest_device;
        break;
      }

      // optional string dest_device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest_device().data(), this->dest_device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShortMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string dest_device = 2;
  if (has_dest_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_device().data(), this->dest_device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dest_device(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShortMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string dest_device = 2;
  if (has_dest_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_device().data(), this->dest_device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest_device(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShortMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string dest_device = 2;
    if (has_dest_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_device());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShortMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShortMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShortMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShortMessage::MergeFrom(const ShortMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_dest_device()) {
      set_dest_device(from.dest_device());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShortMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortMessage::CopyFrom(const ShortMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortMessage::IsInitialized() const {

  return true;
}

void ShortMessage::Swap(ShortMessage* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(dest_device_, other->dest_device_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShortMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShortMessage_descriptor_;
  metadata.reflection = ShortMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPSData::kDeviceIdFieldNumber;
const int GPSData::kTimeFieldNumber;
const int GPSData::kLatitudeFieldNumber;
const int GPSData::kLongitudeFieldNumber;
const int GPSData::kSpeedFieldNumber;
const int GPSData::kElevationFieldNumber;
const int GPSData::kDirectionFieldNumber;
const int GPSData::kRadiusFieldNumber;
const int GPSData::kLoctypeFieldNumber;
const int GPSData::kAddrstrFieldNumber;
const int GPSData::kProvinceFieldNumber;
const int GPSData::kCityFieldNumber;
const int GPSData::kDistrictFieldNumber;
const int GPSData::kPoiFieldNumber;
#endif  // !_MSC_VER

GPSData::GPSData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPSData::InitAsDefaultInstance() {
}

GPSData::GPSData(const GPSData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPSData::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elevation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  radius_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loctype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addrstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  district_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  poi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSData::~GPSData() {
  SharedDtor();
}

void GPSData::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    delete latitude_;
  }
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    delete longitude_;
  }
  if (speed_ != &::google::protobuf::internal::kEmptyString) {
    delete speed_;
  }
  if (elevation_ != &::google::protobuf::internal::kEmptyString) {
    delete elevation_;
  }
  if (direction_ != &::google::protobuf::internal::kEmptyString) {
    delete direction_;
  }
  if (radius_ != &::google::protobuf::internal::kEmptyString) {
    delete radius_;
  }
  if (loctype_ != &::google::protobuf::internal::kEmptyString) {
    delete loctype_;
  }
  if (addrstr_ != &::google::protobuf::internal::kEmptyString) {
    delete addrstr_;
  }
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (district_ != &::google::protobuf::internal::kEmptyString) {
    delete district_;
  }
  if (poi_ != &::google::protobuf::internal::kEmptyString) {
    delete poi_;
  }
  if (this != default_instance_) {
  }
}

void GPSData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSData_descriptor_;
}

const GPSData& GPSData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GPSData* GPSData::default_instance_ = NULL;

GPSData* GPSData::New() const {
  return new GPSData;
}

void GPSData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_latitude()) {
      if (latitude_ != &::google::protobuf::internal::kEmptyString) {
        latitude_->clear();
      }
    }
    if (has_longitude()) {
      if (longitude_ != &::google::protobuf::internal::kEmptyString) {
        longitude_->clear();
      }
    }
    if (has_speed()) {
      if (speed_ != &::google::protobuf::internal::kEmptyString) {
        speed_->clear();
      }
    }
    if (has_elevation()) {
      if (elevation_ != &::google::protobuf::internal::kEmptyString) {
        elevation_->clear();
      }
    }
    if (has_direction()) {
      if (direction_ != &::google::protobuf::internal::kEmptyString) {
        direction_->clear();
      }
    }
    if (has_radius()) {
      if (radius_ != &::google::protobuf::internal::kEmptyString) {
        radius_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_loctype()) {
      if (loctype_ != &::google::protobuf::internal::kEmptyString) {
        loctype_->clear();
      }
    }
    if (has_addrstr()) {
      if (addrstr_ != &::google::protobuf::internal::kEmptyString) {
        addrstr_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::kEmptyString) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_district()) {
      if (district_ != &::google::protobuf::internal::kEmptyString) {
        district_->clear();
      }
    }
    if (has_poi()) {
      if (poi_ != &::google::protobuf::internal::kEmptyString) {
        poi_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional string time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_latitude;
        break;
      }

      // optional string latitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latitude().data(), this->latitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_longitude;
        break;
      }

      // optional string longitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_longitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->longitude().data(), this->longitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_speed;
        break;
      }

      // optional string speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->speed().data(), this->speed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_elevation;
        break;
      }

      // optional string elevation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elevation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_elevation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->elevation().data(), this->elevation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_direction;
        break;
      }

      // optional string direction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_radius;
        break;
      }

      // optional string radius = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radius:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radius()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->radius().data(), this->radius().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_loctype;
        break;
      }

      // optional string loctype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loctype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loctype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loctype().data(), this->loctype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_addrstr;
        break;
      }

      // optional string addrstr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addrstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addrstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addrstr().data(), this->addrstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_province;
        break;
      }

      // optional string province = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_city;
        break;
      }

      // optional string city = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_district;
        break;
      }

      // optional string district = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_district:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_district()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->district().data(), this->district().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_poi;
        break;
      }

      // optional string poi = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poi().data(), this->poi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPSData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time(), output);
  }

  // optional string latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->latitude(), output);
  }

  // optional string longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->longitude(), output);
  }

  // optional string speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speed().data(), this->speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->speed(), output);
  }

  // optional string elevation = 6;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elevation().data(), this->elevation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->elevation(), output);
  }

  // optional string direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->direction(), output);
  }

  // optional string radius = 8;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radius().data(), this->radius().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->radius(), output);
  }

  // optional string loctype = 9;
  if (has_loctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loctype().data(), this->loctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->loctype(), output);
  }

  // optional string addrstr = 10;
  if (has_addrstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addrstr().data(), this->addrstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->addrstr(), output);
  }

  // optional string province = 11;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->province(), output);
  }

  // optional string city = 12;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->city(), output);
  }

  // optional string district = 13;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->district(), output);
  }

  // optional string poi = 14;
  if (has_poi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi().data(), this->poi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->poi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPSData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // optional string latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->latitude(), target);
  }

  // optional string longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->longitude(), target);
  }

  // optional string speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speed().data(), this->speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->speed(), target);
  }

  // optional string elevation = 6;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elevation().data(), this->elevation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->elevation(), target);
  }

  // optional string direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->direction(), target);
  }

  // optional string radius = 8;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radius().data(), this->radius().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->radius(), target);
  }

  // optional string loctype = 9;
  if (has_loctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loctype().data(), this->loctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->loctype(), target);
  }

  // optional string addrstr = 10;
  if (has_addrstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addrstr().data(), this->addrstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->addrstr(), target);
  }

  // optional string province = 11;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->province(), target);
  }

  // optional string city = 12;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->city(), target);
  }

  // optional string district = 13;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->district(), target);
  }

  // optional string poi = 14;
  if (has_poi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi().data(), this->poi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->poi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPSData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional string latitude = 3;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latitude());
    }

    // optional string longitude = 4;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longitude());
    }

    // optional string speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speed());
    }

    // optional string elevation = 6;
    if (has_elevation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->elevation());
    }

    // optional string direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direction());
    }

    // optional string radius = 8;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radius());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string loctype = 9;
    if (has_loctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loctype());
    }

    // optional string addrstr = 10;
    if (has_addrstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addrstr());
    }

    // optional string province = 11;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 12;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string district = 13;
    if (has_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->district());
    }

    // optional string poi = 14;
    if (has_poi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSData::MergeFrom(const GPSData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loctype()) {
      set_loctype(from.loctype());
    }
    if (from.has_addrstr()) {
      set_addrstr(from.addrstr());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_district()) {
      set_district(from.district());
    }
    if (from.has_poi()) {
      set_poi(from.poi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSData::CopyFrom(const GPSData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSData::IsInitialized() const {

  return true;
}

void GPSData::Swap(GPSData* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(time_, other->time_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(speed_, other->speed_);
    std::swap(elevation_, other->elevation_);
    std::swap(direction_, other->direction_);
    std::swap(radius_, other->radius_);
    std::swap(loctype_, other->loctype_);
    std::swap(addrstr_, other->addrstr_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(district_, other->district_);
    std::swap(poi_, other->poi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSData_descriptor_;
  metadata.reflection = GPSData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioFileData::kDeviceIdFieldNumber;
const int AudioFileData::kTimeFieldNumber;
const int AudioFileData::kFileNameFieldNumber;
const int AudioFileData::kDestDeviceFieldNumber;
const int AudioFileData::kTotalPacketsFieldNumber;
const int AudioFileData::kCurrentPacketFieldNumber;
const int AudioFileData::kDataLenFieldNumber;
const int AudioFileData::kDataFieldNumber;
#endif  // !_MSC_VER

AudioFileData::AudioFileData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AudioFileData::InitAsDefaultInstance() {
}

AudioFileData::AudioFileData(const AudioFileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AudioFileData::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_packets_ = 0;
  current_packet_ = 0;
  data_len_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioFileData::~AudioFileData() {
  SharedDtor();
}

void AudioFileData::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (dest_device_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_device_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void AudioFileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioFileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioFileData_descriptor_;
}

const AudioFileData& AudioFileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

AudioFileData* AudioFileData::default_instance_ = NULL;

AudioFileData* AudioFileData::New() const {
  return new AudioFileData;
}

void AudioFileData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_dest_device()) {
      if (dest_device_ != &::google::protobuf::internal::kEmptyString) {
        dest_device_->clear();
      }
    }
    total_packets_ = 0;
    current_packet_ = 0;
    data_len_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioFileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional string time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dest_device;
        break;
      }

      // optional string dest_device = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest_device().data(), this->dest_device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_packets;
        break;
      }

      // optional int32 total_packets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_packets_)));
          set_has_total_packets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_current_packet;
        break;
      }

      // optional int32 current_packet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_packet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_packet_)));
          set_has_current_packet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_data_len;
        break;
      }

      // optional int32 data_len = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_len_)));
          set_has_data_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AudioFileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time(), output);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_name(), output);
  }

  // optional string dest_device = 4;
  if (has_dest_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_device().data(), this->dest_device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dest_device(), output);
  }

  // optional int32 total_packets = 5;
  if (has_total_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_packets(), output);
  }

  // optional int32 current_packet = 6;
  if (has_current_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->current_packet(), output);
  }

  // optional int32 data_len = 7;
  if (has_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->data_len(), output);
  }

  // optional bytes data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AudioFileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // optional string dest_device = 4;
  if (has_dest_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_device().data(), this->dest_device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dest_device(), target);
  }

  // optional int32 total_packets = 5;
  if (has_total_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_packets(), target);
  }

  // optional int32 current_packet = 6;
  if (has_current_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->current_packet(), target);
  }

  // optional int32 data_len = 7;
  if (has_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->data_len(), target);
  }

  // optional bytes data = 8;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AudioFileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string dest_device = 4;
    if (has_dest_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_device());
    }

    // optional int32 total_packets = 5;
    if (has_total_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_packets());
    }

    // optional int32 current_packet = 6;
    if (has_current_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_packet());
    }

    // optional int32 data_len = 7;
    if (has_data_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_len());
    }

    // optional bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioFileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioFileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioFileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioFileData::MergeFrom(const AudioFileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_dest_device()) {
      set_dest_device(from.dest_device());
    }
    if (from.has_total_packets()) {
      set_total_packets(from.total_packets());
    }
    if (from.has_current_packet()) {
      set_current_packet(from.current_packet());
    }
    if (from.has_data_len()) {
      set_data_len(from.data_len());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioFileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFileData::CopyFrom(const AudioFileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFileData::IsInitialized() const {

  return true;
}

void AudioFileData::Swap(AudioFileData* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(time_, other->time_);
    std::swap(file_name_, other->file_name_);
    std::swap(dest_device_, other->dest_device_);
    std::swap(total_packets_, other->total_packets_);
    std::swap(current_packet_, other->current_packet_);
    std::swap(data_len_, other->data_len_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioFileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioFileData_descriptor_;
  metadata.reflection = AudioFileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CaptureFileData::kDeviceIdFieldNumber;
const int CaptureFileData::kTimeFieldNumber;
const int CaptureFileData::kFileNameFieldNumber;
const int CaptureFileData::kTotalPacketsFieldNumber;
const int CaptureFileData::kCurrentPacketFieldNumber;
const int CaptureFileData::kDataLenFieldNumber;
const int CaptureFileData::kDataFieldNumber;
#endif  // !_MSC_VER

CaptureFileData::CaptureFileData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaptureFileData::InitAsDefaultInstance() {
}

CaptureFileData::CaptureFileData(const CaptureFileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaptureFileData::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_packets_ = 0;
  current_packet_ = 0;
  data_len_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaptureFileData::~CaptureFileData() {
  SharedDtor();
}

void CaptureFileData::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CaptureFileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptureFileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaptureFileData_descriptor_;
}

const CaptureFileData& CaptureFileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CaptureFileData* CaptureFileData::default_instance_ = NULL;

CaptureFileData* CaptureFileData::New() const {
  return new CaptureFileData;
}

void CaptureFileData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    total_packets_ = 0;
    current_packet_ = 0;
    data_len_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaptureFileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional string time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_packets;
        break;
      }

      // optional int32 total_packets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_packets_)));
          set_has_total_packets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_current_packet;
        break;
      }

      // optional int32 current_packet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_packet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_packet_)));
          set_has_current_packet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_data_len;
        break;
      }

      // optional int32 data_len = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_len_)));
          set_has_data_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional bytes data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaptureFileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time(), output);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_name(), output);
  }

  // optional int32 total_packets = 4;
  if (has_total_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_packets(), output);
  }

  // optional int32 current_packet = 5;
  if (has_current_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->current_packet(), output);
  }

  // optional int32 data_len = 6;
  if (has_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->data_len(), output);
  }

  // optional bytes data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaptureFileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // optional int32 total_packets = 4;
  if (has_total_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_packets(), target);
  }

  // optional int32 current_packet = 5;
  if (has_current_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->current_packet(), target);
  }

  // optional int32 data_len = 6;
  if (has_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->data_len(), target);
  }

  // optional bytes data = 7;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaptureFileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional int32 total_packets = 4;
    if (has_total_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_packets());
    }

    // optional int32 current_packet = 5;
    if (has_current_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_packet());
    }

    // optional int32 data_len = 6;
    if (has_data_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_len());
    }

    // optional bytes data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptureFileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaptureFileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaptureFileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaptureFileData::MergeFrom(const CaptureFileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_total_packets()) {
      set_total_packets(from.total_packets());
    }
    if (from.has_current_packet()) {
      set_current_packet(from.current_packet());
    }
    if (from.has_data_len()) {
      set_data_len(from.data_len());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaptureFileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptureFileData::CopyFrom(const CaptureFileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureFileData::IsInitialized() const {

  return true;
}

void CaptureFileData::Swap(CaptureFileData* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(time_, other->time_);
    std::swap(file_name_, other->file_name_);
    std::swap(total_packets_, other->total_packets_);
    std::swap(current_packet_, other->current_packet_);
    std::swap(data_len_, other->data_len_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaptureFileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaptureFileData_descriptor_;
  metadata.reflection = CaptureFileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Material::kMaterialIdFieldNumber;
const int Material::kEnglishNameFieldNumber;
const int Material::kChineseNameFieldNumber;
#endif  // !_MSC_VER

Material::Material()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Material::InitAsDefaultInstance() {
}

Material::Material(const Material& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Material::SharedCtor() {
  _cached_size_ = 0;
  material_id_ = 0;
  english_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chinese_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material::~Material() {
  SharedDtor();
}

void Material::SharedDtor() {
  if (english_name_ != &::google::protobuf::internal::kEmptyString) {
    delete english_name_;
  }
  if (chinese_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chinese_name_;
  }
  if (this != default_instance_) {
  }
}

void Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_descriptor_;
}

const Material& Material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Material* Material::default_instance_ = NULL;

Material* Material::New() const {
  return new Material;
}

void Material::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    material_id_ = 0;
    if (has_english_name()) {
      if (english_name_ != &::google::protobuf::internal::kEmptyString) {
        english_name_->clear();
      }
    }
    if (has_chinese_name()) {
      if (chinese_name_ != &::google::protobuf::internal::kEmptyString) {
        chinese_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 material_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_id_)));
          set_has_material_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_english_name;
        break;
      }

      // optional string english_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_english_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_english_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->english_name().data(), this->english_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chinese_name;
        break;
      }

      // optional string chinese_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chinese_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chinese_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chinese_name().data(), this->chinese_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 material_id = 1;
  if (has_material_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->material_id(), output);
  }

  // optional string english_name = 2;
  if (has_english_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->english_name().data(), this->english_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->english_name(), output);
  }

  // optional string chinese_name = 3;
  if (has_chinese_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chinese_name().data(), this->chinese_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->chinese_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 material_id = 1;
  if (has_material_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->material_id(), target);
  }

  // optional string english_name = 2;
  if (has_english_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->english_name().data(), this->english_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->english_name(), target);
  }

  // optional string chinese_name = 3;
  if (has_chinese_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chinese_name().data(), this->chinese_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chinese_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Material::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 material_id = 1;
    if (has_material_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_id());
    }

    // optional string english_name = 2;
    if (has_english_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->english_name());
    }

    // optional string chinese_name = 3;
    if (has_chinese_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chinese_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_material_id()) {
      set_material_id(from.material_id());
    }
    if (from.has_english_name()) {
      set_english_name(from.english_name());
    }
    if (from.has_chinese_name()) {
      set_chinese_name(from.chinese_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {

  return true;
}

void Material::Swap(Material* other) {
  if (other != this) {
    std::swap(material_id_, other->material_id_);
    std::swap(english_name_, other->english_name_);
    std::swap(chinese_name_, other->chinese_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Material_descriptor_;
  metadata.reflection = Material_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialsNotification::kMaterialFieldNumber;
#endif  // !_MSC_VER

MaterialsNotification::MaterialsNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaterialsNotification::InitAsDefaultInstance() {
}

MaterialsNotification::MaterialsNotification(const MaterialsNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaterialsNotification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialsNotification::~MaterialsNotification() {
  SharedDtor();
}

void MaterialsNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaterialsNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialsNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialsNotification_descriptor_;
}

const MaterialsNotification& MaterialsNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MaterialsNotification* MaterialsNotification::default_instance_ = NULL;

MaterialsNotification* MaterialsNotification::New() const {
  return new MaterialsNotification;
}

void MaterialsNotification::Clear() {
  material_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialsNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zaoxun.Material material = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_material;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaterialsNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zaoxun.Material material = 1;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->material(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaterialsNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zaoxun.Material material = 1;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->material(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaterialsNotification::ByteSize() const {
  int total_size = 0;

  // repeated .zaoxun.Material material = 1;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialsNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialsNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialsNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialsNotification::MergeFrom(const MaterialsNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  material_.MergeFrom(from.material_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialsNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialsNotification::CopyFrom(const MaterialsNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialsNotification::IsInitialized() const {

  return true;
}

void MaterialsNotification::Swap(MaterialsNotification* other) {
  if (other != this) {
    material_.Swap(&other->material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialsNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialsNotification_descriptor_;
  metadata.reflection = MaterialsNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollisionCarInfo::kDeviceIdFieldNumber;
const int CollisionCarInfo::kTypeFieldNumber;
const int CollisionCarInfo::kCarNoFieldNumber;
const int CollisionCarInfo::kLevelFieldNumber;
const int CollisionCarInfo::kDistanceFieldNumber;
const int CollisionCarInfo::kLongitudeFieldNumber;
const int CollisionCarInfo::kLatitudeFieldNumber;
#endif  // !_MSC_VER

CollisionCarInfo::CollisionCarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollisionCarInfo::InitAsDefaultInstance() {
}

CollisionCarInfo::CollisionCarInfo(const CollisionCarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollisionCarInfo::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  car_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  distance_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollisionCarInfo::~CollisionCarInfo() {
  SharedDtor();
}

void CollisionCarInfo::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (car_no_ != &::google::protobuf::internal::kEmptyString) {
    delete car_no_;
  }
  if (this != default_instance_) {
  }
}

void CollisionCarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollisionCarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollisionCarInfo_descriptor_;
}

const CollisionCarInfo& CollisionCarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CollisionCarInfo* CollisionCarInfo::default_instance_ = NULL;

CollisionCarInfo* CollisionCarInfo::New() const {
  return new CollisionCarInfo;
}

void CollisionCarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    type_ = 1;
    if (has_car_no()) {
      if (car_no_ != &::google::protobuf::internal::kEmptyString) {
        car_no_->clear();
      }
    }
    level_ = 0;
    distance_ = 0;
    longitude_ = 0;
    latitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollisionCarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .zaoxun.CarType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zaoxun::CarType_IsValid(value)) {
            set_type(static_cast< ::zaoxun::CarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_car_no;
        break;
      }

      // optional string car_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_car_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->car_no().data(), this->car_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_distance;
        break;
      }

      // optional double distance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_longitude;
        break;
      }

      // optional double longitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_latitude;
        break;
      }

      // optional double latitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollisionCarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional .zaoxun.CarType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string car_no = 3;
  if (has_car_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_no().data(), this->car_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->car_no(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional double distance = 5;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->distance(), output);
  }

  // optional double longitude = 6;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->longitude(), output);
  }

  // optional double latitude = 7;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->latitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollisionCarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional .zaoxun.CarType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string car_no = 3;
  if (has_car_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_no().data(), this->car_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->car_no(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional double distance = 5;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->distance(), target);
  }

  // optional double longitude = 6;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->longitude(), target);
  }

  // optional double latitude = 7;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->latitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollisionCarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional .zaoxun.CarType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string car_no = 3;
    if (has_car_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->car_no());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional double distance = 5;
    if (has_distance()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 6;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 7;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionCarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollisionCarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollisionCarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollisionCarInfo::MergeFrom(const CollisionCarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_car_no()) {
      set_car_no(from.car_no());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollisionCarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionCarInfo::CopyFrom(const CollisionCarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionCarInfo::IsInitialized() const {

  return true;
}

void CollisionCarInfo::Swap(CollisionCarInfo* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(type_, other->type_);
    std::swap(car_no_, other->car_no_);
    std::swap(level_, other->level_);
    std::swap(distance_, other->distance_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollisionCarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollisionCarInfo_descriptor_;
  metadata.reflection = CollisionCarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AntiCollisionNotification::kAngleFieldNumber;
#endif  // !_MSC_VER

AntiCollisionNotification::AntiCollisionNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AntiCollisionNotification::InitAsDefaultInstance() {
}

AntiCollisionNotification::AntiCollisionNotification(const AntiCollisionNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AntiCollisionNotification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntiCollisionNotification::~AntiCollisionNotification() {
  SharedDtor();
}

void AntiCollisionNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AntiCollisionNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntiCollisionNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntiCollisionNotification_descriptor_;
}

const AntiCollisionNotification& AntiCollisionNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

AntiCollisionNotification* AntiCollisionNotification::default_instance_ = NULL;

AntiCollisionNotification* AntiCollisionNotification::New() const {
  return new AntiCollisionNotification;
}

void AntiCollisionNotification::Clear() {
  angle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AntiCollisionNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_angle())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_angle())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_angle;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AntiCollisionNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double angle = 1;
  for (int i = 0; i < this->angle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->angle(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AntiCollisionNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double angle = 1;
  for (int i = 0; i < this->angle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->angle(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AntiCollisionNotification::ByteSize() const {
  int total_size = 0;

  // repeated double angle = 1;
  {
    int data_size = 0;
    data_size = 8 * this->angle_size();
    total_size += 1 * this->angle_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntiCollisionNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AntiCollisionNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AntiCollisionNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AntiCollisionNotification::MergeFrom(const AntiCollisionNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  angle_.MergeFrom(from.angle_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AntiCollisionNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntiCollisionNotification::CopyFrom(const AntiCollisionNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntiCollisionNotification::IsInitialized() const {

  return true;
}

void AntiCollisionNotification::Swap(AntiCollisionNotification* other) {
  if (other != this) {
    angle_.Swap(&other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AntiCollisionNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntiCollisionNotification_descriptor_;
  metadata.reflection = AntiCollisionNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EDipperInfo::kDeviceIdFieldNumber;
const int EDipperInfo::kDeviceNoFieldNumber;
const int EDipperInfo::kLongitudeFieldNumber;
const int EDipperInfo::kLatitudeFieldNumber;
#endif  // !_MSC_VER

EDipperInfo::EDipperInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EDipperInfo::InitAsDefaultInstance() {
}

EDipperInfo::EDipperInfo(const EDipperInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EDipperInfo::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  longitude_ = 0;
  latitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EDipperInfo::~EDipperInfo() {
  SharedDtor();
}

void EDipperInfo::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_no_ != &::google::protobuf::internal::kEmptyString) {
    delete device_no_;
  }
  if (this != default_instance_) {
  }
}

void EDipperInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EDipperInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDipperInfo_descriptor_;
}

const EDipperInfo& EDipperInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

EDipperInfo* EDipperInfo::default_instance_ = NULL;

EDipperInfo* EDipperInfo::New() const {
  return new EDipperInfo;
}

void EDipperInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_device_no()) {
      if (device_no_ != &::google::protobuf::internal::kEmptyString) {
        device_no_->clear();
      }
    }
    longitude_ = 0;
    latitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EDipperInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_no;
        break;
      }

      // optional string device_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_no().data(), this->device_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }

      // optional double longitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_latitude;
        break;
      }

      // optional double latitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EDipperInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string device_no = 2;
  if (has_device_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_no().data(), this->device_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_no(), output);
  }

  // optional double longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // optional double latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EDipperInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string device_no = 2;
  if (has_device_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_no().data(), this->device_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_no(), target);
  }

  // optional double longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // optional double latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EDipperInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string device_no = 2;
    if (has_device_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_no());
    }

    // optional double longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EDipperInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EDipperInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EDipperInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EDipperInfo::MergeFrom(const EDipperInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_device_no()) {
      set_device_no(from.device_no());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EDipperInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EDipperInfo::CopyFrom(const EDipperInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EDipperInfo::IsInitialized() const {

  return true;
}

void EDipperInfo::Swap(EDipperInfo* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(device_no_, other->device_no_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EDipperInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EDipperInfo_descriptor_;
  metadata.reflection = EDipperInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EDipperInfoNotification::kInfosFieldNumber;
#endif  // !_MSC_VER

EDipperInfoNotification::EDipperInfoNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EDipperInfoNotification::InitAsDefaultInstance() {
}

EDipperInfoNotification::EDipperInfoNotification(const EDipperInfoNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EDipperInfoNotification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EDipperInfoNotification::~EDipperInfoNotification() {
  SharedDtor();
}

void EDipperInfoNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EDipperInfoNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EDipperInfoNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDipperInfoNotification_descriptor_;
}

const EDipperInfoNotification& EDipperInfoNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

EDipperInfoNotification* EDipperInfoNotification::default_instance_ = NULL;

EDipperInfoNotification* EDipperInfoNotification::New() const {
  return new EDipperInfoNotification;
}

void EDipperInfoNotification::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EDipperInfoNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zaoxun.EDipperInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EDipperInfoNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zaoxun.EDipperInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EDipperInfoNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zaoxun.EDipperInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EDipperInfoNotification::ByteSize() const {
  int total_size = 0;

  // repeated .zaoxun.EDipperInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EDipperInfoNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EDipperInfoNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EDipperInfoNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EDipperInfoNotification::MergeFrom(const EDipperInfoNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EDipperInfoNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EDipperInfoNotification::CopyFrom(const EDipperInfoNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EDipperInfoNotification::IsInitialized() const {

  return true;
}

void EDipperInfoNotification::Swap(EDipperInfoNotification* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EDipperInfoNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EDipperInfoNotification_descriptor_;
  metadata.reflection = EDipperInfoNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEDippersRequest::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

GetEDippersRequest::GetEDippersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEDippersRequest::InitAsDefaultInstance() {
}

GetEDippersRequest::GetEDippersRequest(const GetEDippersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEDippersRequest::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEDippersRequest::~GetEDippersRequest() {
  SharedDtor();
}

void GetEDippersRequest::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void GetEDippersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEDippersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEDippersRequest_descriptor_;
}

const GetEDippersRequest& GetEDippersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GetEDippersRequest* GetEDippersRequest::default_instance_ = NULL;

GetEDippersRequest* GetEDippersRequest::New() const {
  return new GetEDippersRequest;
}

void GetEDippersRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEDippersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEDippersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEDippersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEDippersRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEDippersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEDippersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEDippersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEDippersRequest::MergeFrom(const GetEDippersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEDippersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEDippersRequest::CopyFrom(const GetEDippersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEDippersRequest::IsInitialized() const {

  return true;
}

void GetEDippersRequest::Swap(GetEDippersRequest* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEDippersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEDippersRequest_descriptor_;
  metadata.reflection = GetEDippersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEDippersResponse::kDeviceIdFieldNumber;
const int GetEDippersResponse::kEdippersFieldNumber;
#endif  // !_MSC_VER

GetEDippersResponse::GetEDippersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEDippersResponse::InitAsDefaultInstance() {
}

GetEDippersResponse::GetEDippersResponse(const GetEDippersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEDippersResponse::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEDippersResponse::~GetEDippersResponse() {
  SharedDtor();
}

void GetEDippersResponse::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void GetEDippersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEDippersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEDippersResponse_descriptor_;
}

const GetEDippersResponse& GetEDippersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GetEDippersResponse* GetEDippersResponse::default_instance_ = NULL;

GetEDippersResponse* GetEDippersResponse::New() const {
  return new GetEDippersResponse;
}

void GetEDippersResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  edippers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEDippersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edippers;
        break;
      }

      // repeated .zaoxun.EDipperInfo edippers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edippers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edippers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edippers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEDippersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // repeated .zaoxun.EDipperInfo edippers = 2;
  for (int i = 0; i < this->edippers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edippers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEDippersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // repeated .zaoxun.EDipperInfo edippers = 2;
  for (int i = 0; i < this->edippers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->edippers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEDippersResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  // repeated .zaoxun.EDipperInfo edippers = 2;
  total_size += 1 * this->edippers_size();
  for (int i = 0; i < this->edippers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edippers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEDippersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEDippersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEDippersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEDippersResponse::MergeFrom(const GetEDippersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  edippers_.MergeFrom(from.edippers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEDippersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEDippersResponse::CopyFrom(const GetEDippersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEDippersResponse::IsInitialized() const {

  return true;
}

void GetEDippersResponse::Swap(GetEDippersResponse* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    edippers_.Swap(&other->edippers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEDippersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEDippersResponse_descriptor_;
  metadata.reflection = GetEDippersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadCompleteNotification::kEdipperDeviceIdFieldNumber;
const int LoadCompleteNotification::kCarDeviceIdFieldNumber;
const int LoadCompleteNotification::kLoadResultFieldNumber;
#endif  // !_MSC_VER

LoadCompleteNotification::LoadCompleteNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadCompleteNotification::InitAsDefaultInstance() {
}

LoadCompleteNotification::LoadCompleteNotification(const LoadCompleteNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadCompleteNotification::SharedCtor() {
  _cached_size_ = 0;
  edipper_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  car_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  load_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadCompleteNotification::~LoadCompleteNotification() {
  SharedDtor();
}

void LoadCompleteNotification::SharedDtor() {
  if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete edipper_device_id_;
  }
  if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete car_device_id_;
  }
  if (this != default_instance_) {
  }
}

void LoadCompleteNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadCompleteNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadCompleteNotification_descriptor_;
}

const LoadCompleteNotification& LoadCompleteNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

LoadCompleteNotification* LoadCompleteNotification::default_instance_ = NULL;

LoadCompleteNotification* LoadCompleteNotification::New() const {
  return new LoadCompleteNotification;
}

void LoadCompleteNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_edipper_device_id()) {
      if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
        edipper_device_id_->clear();
      }
    }
    if (has_car_device_id()) {
      if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
        car_device_id_->clear();
      }
    }
    load_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadCompleteNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string edipper_device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edipper_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edipper_device_id().data(), this->edipper_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_car_device_id;
        break;
      }

      // optional string car_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_car_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->car_device_id().data(), this->car_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_load_result;
        break;
      }

      // optional int32 load_result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &load_result_)));
          set_has_load_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadCompleteNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string edipper_device_id = 1;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->edipper_device_id(), output);
  }

  // optional string car_device_id = 2;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->car_device_id(), output);
  }

  // optional int32 load_result = 3;
  if (has_load_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->load_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadCompleteNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string edipper_device_id = 1;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->edipper_device_id(), target);
  }

  // optional string car_device_id = 2;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->car_device_id(), target);
  }

  // optional int32 load_result = 3;
  if (has_load_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->load_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadCompleteNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string edipper_device_id = 1;
    if (has_edipper_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edipper_device_id());
    }

    // optional string car_device_id = 2;
    if (has_car_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->car_device_id());
    }

    // optional int32 load_result = 3;
    if (has_load_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->load_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadCompleteNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadCompleteNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadCompleteNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadCompleteNotification::MergeFrom(const LoadCompleteNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edipper_device_id()) {
      set_edipper_device_id(from.edipper_device_id());
    }
    if (from.has_car_device_id()) {
      set_car_device_id(from.car_device_id());
    }
    if (from.has_load_result()) {
      set_load_result(from.load_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadCompleteNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadCompleteNotification::CopyFrom(const LoadCompleteNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCompleteNotification::IsInitialized() const {

  return true;
}

void LoadCompleteNotification::Swap(LoadCompleteNotification* other) {
  if (other != this) {
    std::swap(edipper_device_id_, other->edipper_device_id_);
    std::swap(car_device_id_, other->car_device_id_);
    std::swap(load_result_, other->load_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadCompleteNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadCompleteNotification_descriptor_;
  metadata.reflection = LoadCompleteNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelLoadRequest::kCarDeviceIdFieldNumber;
const int CancelLoadRequest::kEdipperDeviceIdFieldNumber;
#endif  // !_MSC_VER

CancelLoadRequest::CancelLoadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelLoadRequest::InitAsDefaultInstance() {
}

CancelLoadRequest::CancelLoadRequest(const CancelLoadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelLoadRequest::SharedCtor() {
  _cached_size_ = 0;
  car_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  edipper_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelLoadRequest::~CancelLoadRequest() {
  SharedDtor();
}

void CancelLoadRequest::SharedDtor() {
  if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete car_device_id_;
  }
  if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete edipper_device_id_;
  }
  if (this != default_instance_) {
  }
}

void CancelLoadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelLoadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelLoadRequest_descriptor_;
}

const CancelLoadRequest& CancelLoadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CancelLoadRequest* CancelLoadRequest::default_instance_ = NULL;

CancelLoadRequest* CancelLoadRequest::New() const {
  return new CancelLoadRequest;
}

void CancelLoadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_car_device_id()) {
      if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
        car_device_id_->clear();
      }
    }
    if (has_edipper_device_id()) {
      if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
        edipper_device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelLoadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string car_device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->car_device_id().data(), this->car_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edipper_device_id;
        break;
      }

      // optional string edipper_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edipper_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edipper_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edipper_device_id().data(), this->edipper_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelLoadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string car_device_id = 1;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->car_device_id(), output);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->edipper_device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelLoadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string car_device_id = 1;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->car_device_id(), target);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->edipper_device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelLoadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string car_device_id = 1;
    if (has_car_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->car_device_id());
    }

    // optional string edipper_device_id = 2;
    if (has_edipper_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edipper_device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelLoadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelLoadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelLoadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelLoadRequest::MergeFrom(const CancelLoadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_car_device_id()) {
      set_car_device_id(from.car_device_id());
    }
    if (from.has_edipper_device_id()) {
      set_edipper_device_id(from.edipper_device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelLoadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelLoadRequest::CopyFrom(const CancelLoadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelLoadRequest::IsInitialized() const {

  return true;
}

void CancelLoadRequest::Swap(CancelLoadRequest* other) {
  if (other != this) {
    std::swap(car_device_id_, other->car_device_id_);
    std::swap(edipper_device_id_, other->edipper_device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelLoadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelLoadRequest_descriptor_;
  metadata.reflection = CancelLoadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelLoadResponse::kCarDeviceIdFieldNumber;
const int CancelLoadResponse::kEdipperDeviceIdFieldNumber;
const int CancelLoadResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CancelLoadResponse::CancelLoadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelLoadResponse::InitAsDefaultInstance() {
}

CancelLoadResponse::CancelLoadResponse(const CancelLoadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelLoadResponse::SharedCtor() {
  _cached_size_ = 0;
  car_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  edipper_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelLoadResponse::~CancelLoadResponse() {
  SharedDtor();
}

void CancelLoadResponse::SharedDtor() {
  if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete car_device_id_;
  }
  if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete edipper_device_id_;
  }
  if (this != default_instance_) {
  }
}

void CancelLoadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelLoadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelLoadResponse_descriptor_;
}

const CancelLoadResponse& CancelLoadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CancelLoadResponse* CancelLoadResponse::default_instance_ = NULL;

CancelLoadResponse* CancelLoadResponse::New() const {
  return new CancelLoadResponse;
}

void CancelLoadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_car_device_id()) {
      if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
        car_device_id_->clear();
      }
    }
    if (has_edipper_device_id()) {
      if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
        edipper_device_id_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelLoadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string car_device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->car_device_id().data(), this->car_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edipper_device_id;
        break;
      }

      // optional string edipper_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edipper_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edipper_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edipper_device_id().data(), this->edipper_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelLoadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string car_device_id = 1;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->car_device_id(), output);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->edipper_device_id(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelLoadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string car_device_id = 1;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->car_device_id(), target);
  }

  // optional string edipper_device_id = 2;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->edipper_device_id(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelLoadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string car_device_id = 1;
    if (has_car_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->car_device_id());
    }

    // optional string edipper_device_id = 2;
    if (has_edipper_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edipper_device_id());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelLoadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelLoadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelLoadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelLoadResponse::MergeFrom(const CancelLoadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_car_device_id()) {
      set_car_device_id(from.car_device_id());
    }
    if (from.has_edipper_device_id()) {
      set_edipper_device_id(from.edipper_device_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelLoadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelLoadResponse::CopyFrom(const CancelLoadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelLoadResponse::IsInitialized() const {

  return true;
}

void CancelLoadResponse::Swap(CancelLoadResponse* other) {
  if (other != this) {
    std::swap(car_device_id_, other->car_device_id_);
    std::swap(edipper_device_id_, other->edipper_device_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelLoadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelLoadResponse_descriptor_;
  metadata.reflection = CancelLoadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RejectLoadRequest::kEdipperDeviceIdFieldNumber;
const int RejectLoadRequest::kCarDeviceIdFieldNumber;
#endif  // !_MSC_VER

RejectLoadRequest::RejectLoadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RejectLoadRequest::InitAsDefaultInstance() {
}

RejectLoadRequest::RejectLoadRequest(const RejectLoadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RejectLoadRequest::SharedCtor() {
  _cached_size_ = 0;
  edipper_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  car_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectLoadRequest::~RejectLoadRequest() {
  SharedDtor();
}

void RejectLoadRequest::SharedDtor() {
  if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete edipper_device_id_;
  }
  if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete car_device_id_;
  }
  if (this != default_instance_) {
  }
}

void RejectLoadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejectLoadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectLoadRequest_descriptor_;
}

const RejectLoadRequest& RejectLoadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RejectLoadRequest* RejectLoadRequest::default_instance_ = NULL;

RejectLoadRequest* RejectLoadRequest::New() const {
  return new RejectLoadRequest;
}

void RejectLoadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_edipper_device_id()) {
      if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
        edipper_device_id_->clear();
      }
    }
    if (has_car_device_id()) {
      if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
        car_device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RejectLoadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string edipper_device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edipper_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edipper_device_id().data(), this->edipper_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_car_device_id;
        break;
      }

      // optional string car_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_car_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->car_device_id().data(), this->car_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RejectLoadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string edipper_device_id = 1;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->edipper_device_id(), output);
  }

  // optional string car_device_id = 2;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->car_device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RejectLoadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string edipper_device_id = 1;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->edipper_device_id(), target);
  }

  // optional string car_device_id = 2;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->car_device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RejectLoadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string edipper_device_id = 1;
    if (has_edipper_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edipper_device_id());
    }

    // optional string car_device_id = 2;
    if (has_car_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->car_device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectLoadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RejectLoadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RejectLoadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejectLoadRequest::MergeFrom(const RejectLoadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edipper_device_id()) {
      set_edipper_device_id(from.edipper_device_id());
    }
    if (from.has_car_device_id()) {
      set_car_device_id(from.car_device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RejectLoadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejectLoadRequest::CopyFrom(const RejectLoadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectLoadRequest::IsInitialized() const {

  return true;
}

void RejectLoadRequest::Swap(RejectLoadRequest* other) {
  if (other != this) {
    std::swap(edipper_device_id_, other->edipper_device_id_);
    std::swap(car_device_id_, other->car_device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RejectLoadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejectLoadRequest_descriptor_;
  metadata.reflection = RejectLoadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RejectLoadResponse::kEdipperDeviceIdFieldNumber;
const int RejectLoadResponse::kCarDeviceIdFieldNumber;
const int RejectLoadResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RejectLoadResponse::RejectLoadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RejectLoadResponse::InitAsDefaultInstance() {
}

RejectLoadResponse::RejectLoadResponse(const RejectLoadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RejectLoadResponse::SharedCtor() {
  _cached_size_ = 0;
  edipper_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  car_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectLoadResponse::~RejectLoadResponse() {
  SharedDtor();
}

void RejectLoadResponse::SharedDtor() {
  if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete edipper_device_id_;
  }
  if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete car_device_id_;
  }
  if (this != default_instance_) {
  }
}

void RejectLoadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejectLoadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectLoadResponse_descriptor_;
}

const RejectLoadResponse& RejectLoadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RejectLoadResponse* RejectLoadResponse::default_instance_ = NULL;

RejectLoadResponse* RejectLoadResponse::New() const {
  return new RejectLoadResponse;
}

void RejectLoadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_edipper_device_id()) {
      if (edipper_device_id_ != &::google::protobuf::internal::kEmptyString) {
        edipper_device_id_->clear();
      }
    }
    if (has_car_device_id()) {
      if (car_device_id_ != &::google::protobuf::internal::kEmptyString) {
        car_device_id_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RejectLoadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string edipper_device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edipper_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edipper_device_id().data(), this->edipper_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_car_device_id;
        break;
      }

      // optional string car_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_car_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->car_device_id().data(), this->car_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RejectLoadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string edipper_device_id = 1;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->edipper_device_id(), output);
  }

  // optional string car_device_id = 2;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->car_device_id(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RejectLoadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string edipper_device_id = 1;
  if (has_edipper_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edipper_device_id().data(), this->edipper_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->edipper_device_id(), target);
  }

  // optional string car_device_id = 2;
  if (has_car_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->car_device_id().data(), this->car_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->car_device_id(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RejectLoadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string edipper_device_id = 1;
    if (has_edipper_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edipper_device_id());
    }

    // optional string car_device_id = 2;
    if (has_car_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->car_device_id());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectLoadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RejectLoadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RejectLoadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejectLoadResponse::MergeFrom(const RejectLoadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edipper_device_id()) {
      set_edipper_device_id(from.edipper_device_id());
    }
    if (from.has_car_device_id()) {
      set_car_device_id(from.car_device_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RejectLoadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejectLoadResponse::CopyFrom(const RejectLoadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectLoadResponse::IsInitialized() const {

  return true;
}

void RejectLoadResponse::Swap(RejectLoadResponse* other) {
  if (other != this) {
    std::swap(edipper_device_id_, other->edipper_device_id_);
    std::swap(car_device_id_, other->car_device_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RejectLoadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejectLoadResponse_descriptor_;
  metadata.reflection = RejectLoadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitNotification::kDeviceIdFieldNumber;
const int ExitNotification::kExitTypeFieldNumber;
#endif  // !_MSC_VER

ExitNotification::ExitNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitNotification::InitAsDefaultInstance() {
}

ExitNotification::ExitNotification(const ExitNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitNotification::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exit_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitNotification::~ExitNotification() {
  SharedDtor();
}

void ExitNotification::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void ExitNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitNotification_descriptor_;
}

const ExitNotification& ExitNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ExitNotification* ExitNotification::default_instance_ = NULL;

ExitNotification* ExitNotification::New() const {
  return new ExitNotification;
}

void ExitNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    exit_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exit_type;
        break;
      }

      // optional int32 exit_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_type_)));
          set_has_exit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExitNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int32 exit_type = 2;
  if (has_exit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exit_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int32 exit_type = 2;
  if (has_exit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exit_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 exit_type = 2;
    if (has_exit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitNotification::MergeFrom(const ExitNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_exit_type()) {
      set_exit_type(from.exit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitNotification::CopyFrom(const ExitNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitNotification::IsInitialized() const {

  return true;
}

void ExitNotification::Swap(ExitNotification* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(exit_type_, other->exit_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitNotification_descriptor_;
  metadata.reflection = ExitNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceStatusChangeNotification::kDeviceIdFieldNumber;
const int DeviceStatusChangeNotification::kStatusFieldNumber;
const int DeviceStatusChangeNotification::kTypeFieldNumber;
#endif  // !_MSC_VER

DeviceStatusChangeNotification::DeviceStatusChangeNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceStatusChangeNotification::InitAsDefaultInstance() {
}

DeviceStatusChangeNotification::DeviceStatusChangeNotification(const DeviceStatusChangeNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceStatusChangeNotification::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 1;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceStatusChangeNotification::~DeviceStatusChangeNotification() {
  SharedDtor();
}

void DeviceStatusChangeNotification::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void DeviceStatusChangeNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceStatusChangeNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceStatusChangeNotification_descriptor_;
}

const DeviceStatusChangeNotification& DeviceStatusChangeNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

DeviceStatusChangeNotification* DeviceStatusChangeNotification::default_instance_ = NULL;

DeviceStatusChangeNotification* DeviceStatusChangeNotification::New() const {
  return new DeviceStatusChangeNotification;
}

void DeviceStatusChangeNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    status_ = 1;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceStatusChangeNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .zaoxun.RunningStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zaoxun::RunningStatus_IsValid(value)) {
            set_status(static_cast< ::zaoxun::RunningStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceStatusChangeNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional .zaoxun.RunningStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceStatusChangeNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional .zaoxun.RunningStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceStatusChangeNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional .zaoxun.RunningStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStatusChangeNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceStatusChangeNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceStatusChangeNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceStatusChangeNotification::MergeFrom(const DeviceStatusChangeNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceStatusChangeNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStatusChangeNotification::CopyFrom(const DeviceStatusChangeNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatusChangeNotification::IsInitialized() const {

  return true;
}

void DeviceStatusChangeNotification::Swap(DeviceStatusChangeNotification* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(status_, other->status_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceStatusChangeNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceStatusChangeNotification_descriptor_;
  metadata.reflection = DeviceStatusChangeNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonMessage::kTypeFieldNumber;
const int CommonMessage::kLoginRequestFieldNumber;
const int CommonMessage::kLoginResponseFieldNumber;
const int CommonMessage::kCheckRequestFieldNumber;
const int CommonMessage::kCheckResponseFieldNumber;
const int CommonMessage::kOilQuantityRequestFieldNumber;
const int CommonMessage::kOilQuantityResponseFieldNumber;
const int CommonMessage::kProductionRequestFieldNumber;
const int CommonMessage::kProductionResponseFieldNumber;
const int CommonMessage::kDistanceRequestFieldNumber;
const int CommonMessage::kDistanceResponseFieldNumber;
const int CommonMessage::kTimesRequestFieldNumber;
const int CommonMessage::kTimesResponseFieldNumber;
const int CommonMessage::kOilingRequestFieldNumber;
const int CommonMessage::kOilingResponseFieldNumber;
const int CommonMessage::kLoadRequestFieldNumber;
const int CommonMessage::kLoadResponseFieldNumber;
const int CommonMessage::kUnloadRequestFieldNumber;
const int CommonMessage::kUnloadResponseFieldNumber;
const int CommonMessage::kSpeedLimitFieldNumber;
const int CommonMessage::kShortMessageFieldNumber;
const int CommonMessage::kGpsDataFieldNumber;
const int CommonMessage::kAudioFileDataFieldNumber;
const int CommonMessage::kCaptureFileDataFieldNumber;
const int CommonMessage::kMaterialsNotificationFieldNumber;
const int CommonMessage::kAnticollisionNotificationFieldNumber;
const int CommonMessage::kEdipperinfoNotificationFieldNumber;
const int CommonMessage::kGetEdippersRequestFieldNumber;
const int CommonMessage::kGetEdippersResponseFieldNumber;
const int CommonMessage::kLoadCompleteNotificationFieldNumber;
const int CommonMessage::kCancelLoadRequestFieldNumber;
const int CommonMessage::kCancelLoadResponseFieldNumber;
const int CommonMessage::kRejectLoadRequestFieldNumber;
const int CommonMessage::kRejectLoadResponseFieldNumber;
const int CommonMessage::kExitNotificationFieldNumber;
const int CommonMessage::kDeviceStatusChangeNotificationFieldNumber;
#endif  // !_MSC_VER

CommonMessage::CommonMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonMessage::InitAsDefaultInstance() {
  login_request_ = const_cast< ::zaoxun::LoginRequest*>(&::zaoxun::LoginRequest::default_instance());
  login_response_ = const_cast< ::zaoxun::LoginResponse*>(&::zaoxun::LoginResponse::default_instance());
  check_request_ = const_cast< ::zaoxun::CheckRequest*>(&::zaoxun::CheckRequest::default_instance());
  check_response_ = const_cast< ::zaoxun::CheckResponse*>(&::zaoxun::CheckResponse::default_instance());
  oil_quantity_request_ = const_cast< ::zaoxun::OilQuantityRequest*>(&::zaoxun::OilQuantityRequest::default_instance());
  oil_quantity_response_ = const_cast< ::zaoxun::OilQuantityResponse*>(&::zaoxun::OilQuantityResponse::default_instance());
  production_request_ = const_cast< ::zaoxun::ProductionRequest*>(&::zaoxun::ProductionRequest::default_instance());
  production_response_ = const_cast< ::zaoxun::ProductionResponse*>(&::zaoxun::ProductionResponse::default_instance());
  distance_request_ = const_cast< ::zaoxun::DistanceRequest*>(&::zaoxun::DistanceRequest::default_instance());
  distance_response_ = const_cast< ::zaoxun::DistanceResponse*>(&::zaoxun::DistanceResponse::default_instance());
  times_request_ = const_cast< ::zaoxun::TimesRequest*>(&::zaoxun::TimesRequest::default_instance());
  times_response_ = const_cast< ::zaoxun::TimesResponse*>(&::zaoxun::TimesResponse::default_instance());
  oiling_request_ = const_cast< ::zaoxun::OilingRequest*>(&::zaoxun::OilingRequest::default_instance());
  oiling_response_ = const_cast< ::zaoxun::OilingResponse*>(&::zaoxun::OilingResponse::default_instance());
  load_request_ = const_cast< ::zaoxun::LoadRequest*>(&::zaoxun::LoadRequest::default_instance());
  load_response_ = const_cast< ::zaoxun::LoadResponse*>(&::zaoxun::LoadResponse::default_instance());
  unload_request_ = const_cast< ::zaoxun::UnloadRequest*>(&::zaoxun::UnloadRequest::default_instance());
  unload_response_ = const_cast< ::zaoxun::UnloadResponse*>(&::zaoxun::UnloadResponse::default_instance());
  speed_limit_ = const_cast< ::zaoxun::SpeedLimitMessage*>(&::zaoxun::SpeedLimitMessage::default_instance());
  short_message_ = const_cast< ::zaoxun::ShortMessage*>(&::zaoxun::ShortMessage::default_instance());
  gps_data_ = const_cast< ::zaoxun::GPSData*>(&::zaoxun::GPSData::default_instance());
  audio_file_data_ = const_cast< ::zaoxun::AudioFileData*>(&::zaoxun::AudioFileData::default_instance());
  capture_file_data_ = const_cast< ::zaoxun::CaptureFileData*>(&::zaoxun::CaptureFileData::default_instance());
  materials_notification_ = const_cast< ::zaoxun::MaterialsNotification*>(&::zaoxun::MaterialsNotification::default_instance());
  anticollision_notification_ = const_cast< ::zaoxun::AntiCollisionNotification*>(&::zaoxun::AntiCollisionNotification::default_instance());
  edipperinfo_notification_ = const_cast< ::zaoxun::EDipperInfoNotification*>(&::zaoxun::EDipperInfoNotification::default_instance());
  get_edippers_request_ = const_cast< ::zaoxun::GetEDippersRequest*>(&::zaoxun::GetEDippersRequest::default_instance());
  get_edippers_response_ = const_cast< ::zaoxun::GetEDippersResponse*>(&::zaoxun::GetEDippersResponse::default_instance());
  load_complete_notification_ = const_cast< ::zaoxun::LoadCompleteNotification*>(&::zaoxun::LoadCompleteNotification::default_instance());
  cancel_load_request_ = const_cast< ::zaoxun::CancelLoadRequest*>(&::zaoxun::CancelLoadRequest::default_instance());
  cancel_load_response_ = const_cast< ::zaoxun::CancelLoadResponse*>(&::zaoxun::CancelLoadResponse::default_instance());
  reject_load_request_ = const_cast< ::zaoxun::RejectLoadRequest*>(&::zaoxun::RejectLoadRequest::default_instance());
  reject_load_response_ = const_cast< ::zaoxun::RejectLoadResponse*>(&::zaoxun::RejectLoadResponse::default_instance());
  exit_notification_ = const_cast< ::zaoxun::ExitNotification*>(&::zaoxun::ExitNotification::default_instance());
  device_status_change_notification_ = const_cast< ::zaoxun::DeviceStatusChangeNotification*>(&::zaoxun::DeviceStatusChangeNotification::default_instance());
}

CommonMessage::CommonMessage(const CommonMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  login_request_ = NULL;
  login_response_ = NULL;
  check_request_ = NULL;
  check_response_ = NULL;
  oil_quantity_request_ = NULL;
  oil_quantity_response_ = NULL;
  production_request_ = NULL;
  production_response_ = NULL;
  distance_request_ = NULL;
  distance_response_ = NULL;
  times_request_ = NULL;
  times_response_ = NULL;
  oiling_request_ = NULL;
  oiling_response_ = NULL;
  load_request_ = NULL;
  load_response_ = NULL;
  unload_request_ = NULL;
  unload_response_ = NULL;
  speed_limit_ = NULL;
  short_message_ = NULL;
  gps_data_ = NULL;
  audio_file_data_ = NULL;
  capture_file_data_ = NULL;
  materials_notification_ = NULL;
  anticollision_notification_ = NULL;
  edipperinfo_notification_ = NULL;
  get_edippers_request_ = NULL;
  get_edippers_response_ = NULL;
  load_complete_notification_ = NULL;
  cancel_load_request_ = NULL;
  cancel_load_response_ = NULL;
  reject_load_request_ = NULL;
  reject_load_response_ = NULL;
  exit_notification_ = NULL;
  device_status_change_notification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonMessage::~CommonMessage() {
  SharedDtor();
}

void CommonMessage::SharedDtor() {
  if (this != default_instance_) {
    delete login_request_;
    delete login_response_;
    delete check_request_;
    delete check_response_;
    delete oil_quantity_request_;
    delete oil_quantity_response_;
    delete production_request_;
    delete production_response_;
    delete distance_request_;
    delete distance_response_;
    delete times_request_;
    delete times_response_;
    delete oiling_request_;
    delete oiling_response_;
    delete load_request_;
    delete load_response_;
    delete unload_request_;
    delete unload_response_;
    delete speed_limit_;
    delete short_message_;
    delete gps_data_;
    delete audio_file_data_;
    delete capture_file_data_;
    delete materials_notification_;
    delete anticollision_notification_;
    delete edipperinfo_notification_;
    delete get_edippers_request_;
    delete get_edippers_response_;
    delete load_complete_notification_;
    delete cancel_load_request_;
    delete cancel_load_response_;
    delete reject_load_request_;
    delete reject_load_response_;
    delete exit_notification_;
    delete device_status_change_notification_;
  }
}

void CommonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonMessage_descriptor_;
}

const CommonMessage& CommonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CommonMessage* CommonMessage::default_instance_ = NULL;

CommonMessage* CommonMessage::New() const {
  return new CommonMessage;
}

void CommonMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_login_request()) {
      if (login_request_ != NULL) login_request_->::zaoxun::LoginRequest::Clear();
    }
    if (has_login_response()) {
      if (login_response_ != NULL) login_response_->::zaoxun::LoginResponse::Clear();
    }
    if (has_check_request()) {
      if (check_request_ != NULL) check_request_->::zaoxun::CheckRequest::Clear();
    }
    if (has_check_response()) {
      if (check_response_ != NULL) check_response_->::zaoxun::CheckResponse::Clear();
    }
    if (has_oil_quantity_request()) {
      if (oil_quantity_request_ != NULL) oil_quantity_request_->::zaoxun::OilQuantityRequest::Clear();
    }
    if (has_oil_quantity_response()) {
      if (oil_quantity_response_ != NULL) oil_quantity_response_->::zaoxun::OilQuantityResponse::Clear();
    }
    if (has_production_request()) {
      if (production_request_ != NULL) production_request_->::zaoxun::ProductionRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_production_response()) {
      if (production_response_ != NULL) production_response_->::zaoxun::ProductionResponse::Clear();
    }
    if (has_distance_request()) {
      if (distance_request_ != NULL) distance_request_->::zaoxun::DistanceRequest::Clear();
    }
    if (has_distance_response()) {
      if (distance_response_ != NULL) distance_response_->::zaoxun::DistanceResponse::Clear();
    }
    if (has_times_request()) {
      if (times_request_ != NULL) times_request_->::zaoxun::TimesRequest::Clear();
    }
    if (has_times_response()) {
      if (times_response_ != NULL) times_response_->::zaoxun::TimesResponse::Clear();
    }
    if (has_oiling_request()) {
      if (oiling_request_ != NULL) oiling_request_->::zaoxun::OilingRequest::Clear();
    }
    if (has_oiling_response()) {
      if (oiling_response_ != NULL) oiling_response_->::zaoxun::OilingResponse::Clear();
    }
    if (has_load_request()) {
      if (load_request_ != NULL) load_request_->::zaoxun::LoadRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_load_response()) {
      if (load_response_ != NULL) load_response_->::zaoxun::LoadResponse::Clear();
    }
    if (has_unload_request()) {
      if (unload_request_ != NULL) unload_request_->::zaoxun::UnloadRequest::Clear();
    }
    if (has_unload_response()) {
      if (unload_response_ != NULL) unload_response_->::zaoxun::UnloadResponse::Clear();
    }
    if (has_speed_limit()) {
      if (speed_limit_ != NULL) speed_limit_->::zaoxun::SpeedLimitMessage::Clear();
    }
    if (has_short_message()) {
      if (short_message_ != NULL) short_message_->::zaoxun::ShortMessage::Clear();
    }
    if (has_gps_data()) {
      if (gps_data_ != NULL) gps_data_->::zaoxun::GPSData::Clear();
    }
    if (has_audio_file_data()) {
      if (audio_file_data_ != NULL) audio_file_data_->::zaoxun::AudioFileData::Clear();
    }
    if (has_capture_file_data()) {
      if (capture_file_data_ != NULL) capture_file_data_->::zaoxun::CaptureFileData::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_materials_notification()) {
      if (materials_notification_ != NULL) materials_notification_->::zaoxun::MaterialsNotification::Clear();
    }
    if (has_anticollision_notification()) {
      if (anticollision_notification_ != NULL) anticollision_notification_->::zaoxun::AntiCollisionNotification::Clear();
    }
    if (has_edipperinfo_notification()) {
      if (edipperinfo_notification_ != NULL) edipperinfo_notification_->::zaoxun::EDipperInfoNotification::Clear();
    }
    if (has_get_edippers_request()) {
      if (get_edippers_request_ != NULL) get_edippers_request_->::zaoxun::GetEDippersRequest::Clear();
    }
    if (has_get_edippers_response()) {
      if (get_edippers_response_ != NULL) get_edippers_response_->::zaoxun::GetEDippersResponse::Clear();
    }
    if (has_load_complete_notification()) {
      if (load_complete_notification_ != NULL) load_complete_notification_->::zaoxun::LoadCompleteNotification::Clear();
    }
    if (has_cancel_load_request()) {
      if (cancel_load_request_ != NULL) cancel_load_request_->::zaoxun::CancelLoadRequest::Clear();
    }
    if (has_cancel_load_response()) {
      if (cancel_load_response_ != NULL) cancel_load_response_->::zaoxun::CancelLoadResponse::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_reject_load_request()) {
      if (reject_load_request_ != NULL) reject_load_request_->::zaoxun::RejectLoadRequest::Clear();
    }
    if (has_reject_load_response()) {
      if (reject_load_response_ != NULL) reject_load_response_->::zaoxun::RejectLoadResponse::Clear();
    }
    if (has_exit_notification()) {
      if (exit_notification_ != NULL) exit_notification_->::zaoxun::ExitNotification::Clear();
    }
    if (has_device_status_change_notification()) {
      if (device_status_change_notification_ != NULL) device_status_change_notification_->::zaoxun::DeviceStatusChangeNotification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zaoxun.MessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zaoxun::MessageType_IsValid(value)) {
            set_type(static_cast< ::zaoxun::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login_request;
        break;
      }

      // optional .zaoxun.LoginRequest login_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login_response;
        break;
      }

      // optional .zaoxun.LoginResponse login_response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_check_request;
        break;
      }

      // optional .zaoxun.CheckRequest check_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_check_response;
        break;
      }

      // optional .zaoxun.CheckResponse check_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_oil_quantity_request;
        break;
      }

      // optional .zaoxun.OilQuantityRequest oil_quantity_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oil_quantity_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oil_quantity_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_oil_quantity_response;
        break;
      }

      // optional .zaoxun.OilQuantityResponse oil_quantity_response = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oil_quantity_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oil_quantity_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_production_request;
        break;
      }

      // optional .zaoxun.ProductionRequest production_request = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_production_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_production_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_production_response;
        break;
      }

      // optional .zaoxun.ProductionResponse production_response = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_production_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_production_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_distance_request;
        break;
      }

      // optional .zaoxun.DistanceRequest distance_request = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distance_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distance_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_distance_response;
        break;
      }

      // optional .zaoxun.DistanceResponse distance_response = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distance_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distance_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_times_request;
        break;
      }

      // optional .zaoxun.TimesRequest times_request = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_times_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_times_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_times_response;
        break;
      }

      // optional .zaoxun.TimesResponse times_response = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_times_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_times_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_oiling_request;
        break;
      }

      // optional .zaoxun.OilingRequest oiling_request = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oiling_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oiling_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_oiling_response;
        break;
      }

      // optional .zaoxun.OilingResponse oiling_response = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oiling_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oiling_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_load_request;
        break;
      }

      // optional .zaoxun.LoadRequest load_request = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_load_response;
        break;
      }

      // optional .zaoxun.LoadResponse load_response = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_unload_request;
        break;
      }

      // optional .zaoxun.UnloadRequest unload_request = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unload_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unload_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_unload_response;
        break;
      }

      // optional .zaoxun.UnloadResponse unload_response = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unload_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unload_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_speed_limit;
        break;
      }

      // optional .zaoxun.SpeedLimitMessage speed_limit = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speed_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_short_message;
        break;
      }

      // optional .zaoxun.ShortMessage short_message = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_short_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_short_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_gps_data;
        break;
      }

      // optional .zaoxun.GPSData gps_data = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gps_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_audio_file_data;
        break;
      }

      // optional .zaoxun.AudioFileData audio_file_data = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audio_file_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_file_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_capture_file_data;
        break;
      }

      // optional .zaoxun.CaptureFileData capture_file_data = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capture_file_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capture_file_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_materials_notification;
        break;
      }

      // optional .zaoxun.MaterialsNotification materials_notification = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materials_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_materials_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_anticollision_notification;
        break;
      }

      // optional .zaoxun.AntiCollisionNotification anticollision_notification = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anticollision_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anticollision_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_edipperinfo_notification;
        break;
      }

      // optional .zaoxun.EDipperInfoNotification edipperinfo_notification = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edipperinfo_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edipperinfo_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_get_edippers_request;
        break;
      }

      // optional .zaoxun.GetEDippersRequest get_edippers_request = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_edippers_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_edippers_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_get_edippers_response;
        break;
      }

      // optional .zaoxun.GetEDippersResponse get_edippers_response = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_edippers_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_edippers_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_load_complete_notification;
        break;
      }

      // optional .zaoxun.LoadCompleteNotification load_complete_notification = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_complete_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_complete_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_cancel_load_request;
        break;
      }

      // optional .zaoxun.CancelLoadRequest cancel_load_request = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cancel_load_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cancel_load_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_cancel_load_response;
        break;
      }

      // optional .zaoxun.CancelLoadResponse cancel_load_response = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cancel_load_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cancel_load_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_reject_load_request;
        break;
      }

      // optional .zaoxun.RejectLoadRequest reject_load_request = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reject_load_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reject_load_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_reject_load_response;
        break;
      }

      // optional .zaoxun.RejectLoadResponse reject_load_response = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reject_load_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reject_load_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_exit_notification;
        break;
      }

      // optional .zaoxun.ExitNotification exit_notification = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exit_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_device_status_change_notification;
        break;
      }

      // optional .zaoxun.DeviceStatusChangeNotification device_status_change_notification = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_status_change_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_status_change_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zaoxun.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .zaoxun.LoginRequest login_request = 2;
  if (has_login_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->login_request(), output);
  }

  // optional .zaoxun.LoginResponse login_response = 3;
  if (has_login_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->login_response(), output);
  }

  // optional .zaoxun.CheckRequest check_request = 4;
  if (has_check_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->check_request(), output);
  }

  // optional .zaoxun.CheckResponse check_response = 5;
  if (has_check_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->check_response(), output);
  }

  // optional .zaoxun.OilQuantityRequest oil_quantity_request = 6;
  if (has_oil_quantity_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->oil_quantity_request(), output);
  }

  // optional .zaoxun.OilQuantityResponse oil_quantity_response = 7;
  if (has_oil_quantity_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->oil_quantity_response(), output);
  }

  // optional .zaoxun.ProductionRequest production_request = 8;
  if (has_production_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->production_request(), output);
  }

  // optional .zaoxun.ProductionResponse production_response = 9;
  if (has_production_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->production_response(), output);
  }

  // optional .zaoxun.DistanceRequest distance_request = 10;
  if (has_distance_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->distance_request(), output);
  }

  // optional .zaoxun.DistanceResponse distance_response = 11;
  if (has_distance_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->distance_response(), output);
  }

  // optional .zaoxun.TimesRequest times_request = 12;
  if (has_times_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->times_request(), output);
  }

  // optional .zaoxun.TimesResponse times_response = 13;
  if (has_times_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->times_response(), output);
  }

  // optional .zaoxun.OilingRequest oiling_request = 14;
  if (has_oiling_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->oiling_request(), output);
  }

  // optional .zaoxun.OilingResponse oiling_response = 15;
  if (has_oiling_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->oiling_response(), output);
  }

  // optional .zaoxun.LoadRequest load_request = 16;
  if (has_load_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->load_request(), output);
  }

  // optional .zaoxun.LoadResponse load_response = 17;
  if (has_load_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->load_response(), output);
  }

  // optional .zaoxun.UnloadRequest unload_request = 18;
  if (has_unload_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->unload_request(), output);
  }

  // optional .zaoxun.UnloadResponse unload_response = 19;
  if (has_unload_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->unload_response(), output);
  }

  // optional .zaoxun.SpeedLimitMessage speed_limit = 20;
  if (has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->speed_limit(), output);
  }

  // optional .zaoxun.ShortMessage short_message = 21;
  if (has_short_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->short_message(), output);
  }

  // optional .zaoxun.GPSData gps_data = 22;
  if (has_gps_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->gps_data(), output);
  }

  // optional .zaoxun.AudioFileData audio_file_data = 23;
  if (has_audio_file_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->audio_file_data(), output);
  }

  // optional .zaoxun.CaptureFileData capture_file_data = 24;
  if (has_capture_file_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->capture_file_data(), output);
  }

  // optional .zaoxun.MaterialsNotification materials_notification = 25;
  if (has_materials_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->materials_notification(), output);
  }

  // optional .zaoxun.AntiCollisionNotification anticollision_notification = 26;
  if (has_anticollision_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->anticollision_notification(), output);
  }

  // optional .zaoxun.EDipperInfoNotification edipperinfo_notification = 27;
  if (has_edipperinfo_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->edipperinfo_notification(), output);
  }

  // optional .zaoxun.GetEDippersRequest get_edippers_request = 28;
  if (has_get_edippers_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->get_edippers_request(), output);
  }

  // optional .zaoxun.GetEDippersResponse get_edippers_response = 29;
  if (has_get_edippers_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->get_edippers_response(), output);
  }

  // optional .zaoxun.LoadCompleteNotification load_complete_notification = 30;
  if (has_load_complete_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->load_complete_notification(), output);
  }

  // optional .zaoxun.CancelLoadRequest cancel_load_request = 31;
  if (has_cancel_load_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->cancel_load_request(), output);
  }

  // optional .zaoxun.CancelLoadResponse cancel_load_response = 32;
  if (has_cancel_load_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->cancel_load_response(), output);
  }

  // optional .zaoxun.RejectLoadRequest reject_load_request = 33;
  if (has_reject_load_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->reject_load_request(), output);
  }

  // optional .zaoxun.RejectLoadResponse reject_load_response = 34;
  if (has_reject_load_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->reject_load_response(), output);
  }

  // optional .zaoxun.ExitNotification exit_notification = 35;
  if (has_exit_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->exit_notification(), output);
  }

  // optional .zaoxun.DeviceStatusChangeNotification device_status_change_notification = 36;
  if (has_device_status_change_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->device_status_change_notification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zaoxun.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .zaoxun.LoginRequest login_request = 2;
  if (has_login_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->login_request(), target);
  }

  // optional .zaoxun.LoginResponse login_response = 3;
  if (has_login_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->login_response(), target);
  }

  // optional .zaoxun.CheckRequest check_request = 4;
  if (has_check_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->check_request(), target);
  }

  // optional .zaoxun.CheckResponse check_response = 5;
  if (has_check_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->check_response(), target);
  }

  // optional .zaoxun.OilQuantityRequest oil_quantity_request = 6;
  if (has_oil_quantity_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->oil_quantity_request(), target);
  }

  // optional .zaoxun.OilQuantityResponse oil_quantity_response = 7;
  if (has_oil_quantity_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->oil_quantity_response(), target);
  }

  // optional .zaoxun.ProductionRequest production_request = 8;
  if (has_production_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->production_request(), target);
  }

  // optional .zaoxun.ProductionResponse production_response = 9;
  if (has_production_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->production_response(), target);
  }

  // optional .zaoxun.DistanceRequest distance_request = 10;
  if (has_distance_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->distance_request(), target);
  }

  // optional .zaoxun.DistanceResponse distance_response = 11;
  if (has_distance_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->distance_response(), target);
  }

  // optional .zaoxun.TimesRequest times_request = 12;
  if (has_times_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->times_request(), target);
  }

  // optional .zaoxun.TimesResponse times_response = 13;
  if (has_times_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->times_response(), target);
  }

  // optional .zaoxun.OilingRequest oiling_request = 14;
  if (has_oiling_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->oiling_request(), target);
  }

  // optional .zaoxun.OilingResponse oiling_response = 15;
  if (has_oiling_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->oiling_response(), target);
  }

  // optional .zaoxun.LoadRequest load_request = 16;
  if (has_load_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->load_request(), target);
  }

  // optional .zaoxun.LoadResponse load_response = 17;
  if (has_load_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->load_response(), target);
  }

  // optional .zaoxun.UnloadRequest unload_request = 18;
  if (has_unload_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->unload_request(), target);
  }

  // optional .zaoxun.UnloadResponse unload_response = 19;
  if (has_unload_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->unload_response(), target);
  }

  // optional .zaoxun.SpeedLimitMessage speed_limit = 20;
  if (has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->speed_limit(), target);
  }

  // optional .zaoxun.ShortMessage short_message = 21;
  if (has_short_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->short_message(), target);
  }

  // optional .zaoxun.GPSData gps_data = 22;
  if (has_gps_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->gps_data(), target);
  }

  // optional .zaoxun.AudioFileData audio_file_data = 23;
  if (has_audio_file_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->audio_file_data(), target);
  }

  // optional .zaoxun.CaptureFileData capture_file_data = 24;
  if (has_capture_file_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->capture_file_data(), target);
  }

  // optional .zaoxun.MaterialsNotification materials_notification = 25;
  if (has_materials_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->materials_notification(), target);
  }

  // optional .zaoxun.AntiCollisionNotification anticollision_notification = 26;
  if (has_anticollision_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->anticollision_notification(), target);
  }

  // optional .zaoxun.EDipperInfoNotification edipperinfo_notification = 27;
  if (has_edipperinfo_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->edipperinfo_notification(), target);
  }

  // optional .zaoxun.GetEDippersRequest get_edippers_request = 28;
  if (has_get_edippers_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->get_edippers_request(), target);
  }

  // optional .zaoxun.GetEDippersResponse get_edippers_response = 29;
  if (has_get_edippers_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->get_edippers_response(), target);
  }

  // optional .zaoxun.LoadCompleteNotification load_complete_notification = 30;
  if (has_load_complete_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->load_complete_notification(), target);
  }

  // optional .zaoxun.CancelLoadRequest cancel_load_request = 31;
  if (has_cancel_load_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->cancel_load_request(), target);
  }

  // optional .zaoxun.CancelLoadResponse cancel_load_response = 32;
  if (has_cancel_load_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->cancel_load_response(), target);
  }

  // optional .zaoxun.RejectLoadRequest reject_load_request = 33;
  if (has_reject_load_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->reject_load_request(), target);
  }

  // optional .zaoxun.RejectLoadResponse reject_load_response = 34;
  if (has_reject_load_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->reject_load_response(), target);
  }

  // optional .zaoxun.ExitNotification exit_notification = 35;
  if (has_exit_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->exit_notification(), target);
  }

  // optional .zaoxun.DeviceStatusChangeNotification device_status_change_notification = 36;
  if (has_device_status_change_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->device_status_change_notification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zaoxun.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .zaoxun.LoginRequest login_request = 2;
    if (has_login_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_request());
    }

    // optional .zaoxun.LoginResponse login_response = 3;
    if (has_login_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_response());
    }

    // optional .zaoxun.CheckRequest check_request = 4;
    if (has_check_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_request());
    }

    // optional .zaoxun.CheckResponse check_response = 5;
    if (has_check_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_response());
    }

    // optional .zaoxun.OilQuantityRequest oil_quantity_request = 6;
    if (has_oil_quantity_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oil_quantity_request());
    }

    // optional .zaoxun.OilQuantityResponse oil_quantity_response = 7;
    if (has_oil_quantity_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oil_quantity_response());
    }

    // optional .zaoxun.ProductionRequest production_request = 8;
    if (has_production_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->production_request());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .zaoxun.ProductionResponse production_response = 9;
    if (has_production_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->production_response());
    }

    // optional .zaoxun.DistanceRequest distance_request = 10;
    if (has_distance_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->distance_request());
    }

    // optional .zaoxun.DistanceResponse distance_response = 11;
    if (has_distance_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->distance_response());
    }

    // optional .zaoxun.TimesRequest times_request = 12;
    if (has_times_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->times_request());
    }

    // optional .zaoxun.TimesResponse times_response = 13;
    if (has_times_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->times_response());
    }

    // optional .zaoxun.OilingRequest oiling_request = 14;
    if (has_oiling_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oiling_request());
    }

    // optional .zaoxun.OilingResponse oiling_response = 15;
    if (has_oiling_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oiling_response());
    }

    // optional .zaoxun.LoadRequest load_request = 16;
    if (has_load_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load_request());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .zaoxun.LoadResponse load_response = 17;
    if (has_load_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load_response());
    }

    // optional .zaoxun.UnloadRequest unload_request = 18;
    if (has_unload_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unload_request());
    }

    // optional .zaoxun.UnloadResponse unload_response = 19;
    if (has_unload_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unload_response());
    }

    // optional .zaoxun.SpeedLimitMessage speed_limit = 20;
    if (has_speed_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_limit());
    }

    // optional .zaoxun.ShortMessage short_message = 21;
    if (has_short_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->short_message());
    }

    // optional .zaoxun.GPSData gps_data = 22;
    if (has_gps_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps_data());
    }

    // optional .zaoxun.AudioFileData audio_file_data = 23;
    if (has_audio_file_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio_file_data());
    }

    // optional .zaoxun.CaptureFileData capture_file_data = 24;
    if (has_capture_file_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->capture_file_data());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .zaoxun.MaterialsNotification materials_notification = 25;
    if (has_materials_notification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->materials_notification());
    }

    // optional .zaoxun.AntiCollisionNotification anticollision_notification = 26;
    if (has_anticollision_notification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anticollision_notification());
    }

    // optional .zaoxun.EDipperInfoNotification edipperinfo_notification = 27;
    if (has_edipperinfo_notification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edipperinfo_notification());
    }

    // optional .zaoxun.GetEDippersRequest get_edippers_request = 28;
    if (has_get_edippers_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_edippers_request());
    }

    // optional .zaoxun.GetEDippersResponse get_edippers_response = 29;
    if (has_get_edippers_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_edippers_response());
    }

    // optional .zaoxun.LoadCompleteNotification load_complete_notification = 30;
    if (has_load_complete_notification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load_complete_notification());
    }

    // optional .zaoxun.CancelLoadRequest cancel_load_request = 31;
    if (has_cancel_load_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cancel_load_request());
    }

    // optional .zaoxun.CancelLoadResponse cancel_load_response = 32;
    if (has_cancel_load_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cancel_load_response());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .zaoxun.RejectLoadRequest reject_load_request = 33;
    if (has_reject_load_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reject_load_request());
    }

    // optional .zaoxun.RejectLoadResponse reject_load_response = 34;
    if (has_reject_load_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reject_load_response());
    }

    // optional .zaoxun.ExitNotification exit_notification = 35;
    if (has_exit_notification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exit_notification());
    }

    // optional .zaoxun.DeviceStatusChangeNotification device_status_change_notification = 36;
    if (has_device_status_change_notification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_status_change_notification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonMessage::MergeFrom(const CommonMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_login_request()) {
      mutable_login_request()->::zaoxun::LoginRequest::MergeFrom(from.login_request());
    }
    if (from.has_login_response()) {
      mutable_login_response()->::zaoxun::LoginResponse::MergeFrom(from.login_response());
    }
    if (from.has_check_request()) {
      mutable_check_request()->::zaoxun::CheckRequest::MergeFrom(from.check_request());
    }
    if (from.has_check_response()) {
      mutable_check_response()->::zaoxun::CheckResponse::MergeFrom(from.check_response());
    }
    if (from.has_oil_quantity_request()) {
      mutable_oil_quantity_request()->::zaoxun::OilQuantityRequest::MergeFrom(from.oil_quantity_request());
    }
    if (from.has_oil_quantity_response()) {
      mutable_oil_quantity_response()->::zaoxun::OilQuantityResponse::MergeFrom(from.oil_quantity_response());
    }
    if (from.has_production_request()) {
      mutable_production_request()->::zaoxun::ProductionRequest::MergeFrom(from.production_request());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_production_response()) {
      mutable_production_response()->::zaoxun::ProductionResponse::MergeFrom(from.production_response());
    }
    if (from.has_distance_request()) {
      mutable_distance_request()->::zaoxun::DistanceRequest::MergeFrom(from.distance_request());
    }
    if (from.has_distance_response()) {
      mutable_distance_response()->::zaoxun::DistanceResponse::MergeFrom(from.distance_response());
    }
    if (from.has_times_request()) {
      mutable_times_request()->::zaoxun::TimesRequest::MergeFrom(from.times_request());
    }
    if (from.has_times_response()) {
      mutable_times_response()->::zaoxun::TimesResponse::MergeFrom(from.times_response());
    }
    if (from.has_oiling_request()) {
      mutable_oiling_request()->::zaoxun::OilingRequest::MergeFrom(from.oiling_request());
    }
    if (from.has_oiling_response()) {
      mutable_oiling_response()->::zaoxun::OilingResponse::MergeFrom(from.oiling_response());
    }
    if (from.has_load_request()) {
      mutable_load_request()->::zaoxun::LoadRequest::MergeFrom(from.load_request());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_load_response()) {
      mutable_load_response()->::zaoxun::LoadResponse::MergeFrom(from.load_response());
    }
    if (from.has_unload_request()) {
      mutable_unload_request()->::zaoxun::UnloadRequest::MergeFrom(from.unload_request());
    }
    if (from.has_unload_response()) {
      mutable_unload_response()->::zaoxun::UnloadResponse::MergeFrom(from.unload_response());
    }
    if (from.has_speed_limit()) {
      mutable_speed_limit()->::zaoxun::SpeedLimitMessage::MergeFrom(from.speed_limit());
    }
    if (from.has_short_message()) {
      mutable_short_message()->::zaoxun::ShortMessage::MergeFrom(from.short_message());
    }
    if (from.has_gps_data()) {
      mutable_gps_data()->::zaoxun::GPSData::MergeFrom(from.gps_data());
    }
    if (from.has_audio_file_data()) {
      mutable_audio_file_data()->::zaoxun::AudioFileData::MergeFrom(from.audio_file_data());
    }
    if (from.has_capture_file_data()) {
      mutable_capture_file_data()->::zaoxun::CaptureFileData::MergeFrom(from.capture_file_data());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_materials_notification()) {
      mutable_materials_notification()->::zaoxun::MaterialsNotification::MergeFrom(from.materials_notification());
    }
    if (from.has_anticollision_notification()) {
      mutable_anticollision_notification()->::zaoxun::AntiCollisionNotification::MergeFrom(from.anticollision_notification());
    }
    if (from.has_edipperinfo_notification()) {
      mutable_edipperinfo_notification()->::zaoxun::EDipperInfoNotification::MergeFrom(from.edipperinfo_notification());
    }
    if (from.has_get_edippers_request()) {
      mutable_get_edippers_request()->::zaoxun::GetEDippersRequest::MergeFrom(from.get_edippers_request());
    }
    if (from.has_get_edippers_response()) {
      mutable_get_edippers_response()->::zaoxun::GetEDippersResponse::MergeFrom(from.get_edippers_response());
    }
    if (from.has_load_complete_notification()) {
      mutable_load_complete_notification()->::zaoxun::LoadCompleteNotification::MergeFrom(from.load_complete_notification());
    }
    if (from.has_cancel_load_request()) {
      mutable_cancel_load_request()->::zaoxun::CancelLoadRequest::MergeFrom(from.cancel_load_request());
    }
    if (from.has_cancel_load_response()) {
      mutable_cancel_load_response()->::zaoxun::CancelLoadResponse::MergeFrom(from.cancel_load_response());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_reject_load_request()) {
      mutable_reject_load_request()->::zaoxun::RejectLoadRequest::MergeFrom(from.reject_load_request());
    }
    if (from.has_reject_load_response()) {
      mutable_reject_load_response()->::zaoxun::RejectLoadResponse::MergeFrom(from.reject_load_response());
    }
    if (from.has_exit_notification()) {
      mutable_exit_notification()->::zaoxun::ExitNotification::MergeFrom(from.exit_notification());
    }
    if (from.has_device_status_change_notification()) {
      mutable_device_status_change_notification()->::zaoxun::DeviceStatusChangeNotification::MergeFrom(from.device_status_change_notification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonMessage::CopyFrom(const CommonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonMessage::IsInitialized() const {

  return true;
}

void CommonMessage::Swap(CommonMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(login_request_, other->login_request_);
    std::swap(login_response_, other->login_response_);
    std::swap(check_request_, other->check_request_);
    std::swap(check_response_, other->check_response_);
    std::swap(oil_quantity_request_, other->oil_quantity_request_);
    std::swap(oil_quantity_response_, other->oil_quantity_response_);
    std::swap(production_request_, other->production_request_);
    std::swap(production_response_, other->production_response_);
    std::swap(distance_request_, other->distance_request_);
    std::swap(distance_response_, other->distance_response_);
    std::swap(times_request_, other->times_request_);
    std::swap(times_response_, other->times_response_);
    std::swap(oiling_request_, other->oiling_request_);
    std::swap(oiling_response_, other->oiling_response_);
    std::swap(load_request_, other->load_request_);
    std::swap(load_response_, other->load_response_);
    std::swap(unload_request_, other->unload_request_);
    std::swap(unload_response_, other->unload_response_);
    std::swap(speed_limit_, other->speed_limit_);
    std::swap(short_message_, other->short_message_);
    std::swap(gps_data_, other->gps_data_);
    std::swap(audio_file_data_, other->audio_file_data_);
    std::swap(capture_file_data_, other->capture_file_data_);
    std::swap(materials_notification_, other->materials_notification_);
    std::swap(anticollision_notification_, other->anticollision_notification_);
    std::swap(edipperinfo_notification_, other->edipperinfo_notification_);
    std::swap(get_edippers_request_, other->get_edippers_request_);
    std::swap(get_edippers_response_, other->get_edippers_response_);
    std::swap(load_complete_notification_, other->load_complete_notification_);
    std::swap(cancel_load_request_, other->cancel_load_request_);
    std::swap(cancel_load_response_, other->cancel_load_response_);
    std::swap(reject_load_request_, other->reject_load_request_);
    std::swap(reject_load_response_, other->reject_load_response_);
    std::swap(exit_notification_, other->exit_notification_);
    std::swap(device_status_change_notification_, other->device_status_change_notification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonMessage_descriptor_;
  metadata.reflection = CommonMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zaoxun

// @@protoc_insertion_point(global_scope)
